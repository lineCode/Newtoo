#pragma once

namespace Newtoo
{
    class StyleMetrics
    {
    public:
        StyleMetrics(CSSStyleDeclaration* decl);
        StyleMetrics(StyleMetrics& ref);
        StyleMetrics();
    
        const short Inherit = 0x7FFD;
    
        const short Initial = 0x7FFE;
    
        const short Unset = 0x7FFF;
    
        unsigned long length();
    
        DOMString item(unsigned long index);
    
        DOMString getPropertyValue(DOMString propertyID);
    
        void setPropertyValue(DOMString propertyID, DOMString value);
    
        const char& NoKeyword = 0x7FFA;
    
        static CSSOMString keywordToString(short value);
    
        static short keywordFromString(CSSOMString str);
    
        static bool isKeyword(CSSOMString str);
    
    
    
    protected:
    
    };
    
    enum class Unit
    {
        In = 0x0,
        Cm = 0x1,
        Mm = 0x2,
        Q = 0x3,
        Pt = 0x4,
        Pc = 0x5,
        Px = 0x6,
        Deg = 0x7,
        Grad = 0x8,
        Rad = 0x9,
        Turn = 0xa,
        Percentages = 0xb,
        Rem = 0xc,
        Em = 0xd,
        Ex = 0xe,
        Ch = 0xf,
        Vw = 0x10,
        Vh = 0x11,
        Vmin = 0x12,
        Vmax = 0x13,
        Fr = 0x14
    };
    
    class NumericValue
    {
    public:
        NumericValue(double aValue, Unit aUnit);
        NumericValue(NumericValue& ref);
        NumericValue();
    
        double value() const;
        void setValue(double aValue);
    
        Unit unit() const;
        void setUnit(Unit aUnit);
    
        double toPx(double relativeValue = 0);
    
        CSSOMString toString();
    
        static NumericValue fromString(CSSOMString str);
    
    
    
    protected:
        double mValue;
        Unit mUnit;
    
    };
    
    enum TimeUnit
    {
        Minutes = 0x15,
        Seconds = 0x16,
        Milliseconds = 0x17
    };
    
    class PeriodValue
    {
    public:
        PeriodValue(unsigned long aNumber, TimeUnit aUnit);
        PeriodValue(PeriodValue& ref);
        PeriodValue();
    
        double number() const;
        void setNumber(double aNumber);
    
        TimeUnit unit() const;
        void setUnit(TimeUnit aUnit);
    
        unsigned long toMilliseconds();
    
        CSSOMString toString();
    
        static PeriodValue fromString(CSSOMString str);
    
    
    
    protected:
        double mNumber;
        TimeUnit mUnit;
    
    };
    
    enum class ColorKeyword
    {
        AliceBlue = 0x18,
        AntiqueWhite = 0x19,
        Aqua = 0x1a,
        Aquamarine = 0x1b,
        Azure = 0x1c,
        Beige = 0x1d,
        Bisque = 0x1e,
        Black = 0x1f,
        BlanchedAlmond = 0x20,
        Blue = 0x21,
        BlueViolet = 0x22,
        Brown = 0x23,
        BurlyWood = 0x24,
        CadetBlue = 0x25,
        Chartreuse = 0x26,
        Chocolate = 0x27,
        Coral = 0x28,
        CornflowerBlue = 0x29,
        Cornsilk = 0x2a,
        Crimson = 0x2b,
        Aqua = 0x2c,
        DarkBlue = 0x2d,
        DarkCyan = 0x2e,
        DarkGoldenrod = 0x2f,
        DarkGray = 0x30,
        DarkGreen = 0x31,
        DarkKhaki = 0x32,
        DarkMagenta = 0x33,
        DarkOliveGreen = 0x34,
        DarkOrange = 0x35,
        DarkOrchid = 0x36,
        DarkRed = 0x37,
        DarkSalmon = 0x38,
        DarkSeaGreen = 0x39,
        DarkSlateBlue = 0x3a,
        DarkSlateGray = 0x3b,
        DarkTurquoise = 0x3c,
        DarkViolet = 0x3d,
        DeepPink = 0x3e,
        DeepSkyBlue = 0x3f,
        DimGray = 0x40,
        DodgerBlue = 0x41,
        Firebrick = 0x42,
        FloralWhite = 0x43,
        ForestGreen = 0x44,
        Fuchsia = 0x45,
        Gainsboro = 0x46,
        GhostWhite = 0x47,
        Gold = 0x48,
        Goldenrod = 0x49,
        Gray = 0x4a,
        Green = 0x4b,
        GreenYellow = 0x4c,
        Honeydew = 0x4d,
        HotPink = 0x4e,
        IndianRed = 0x4f,
        Indigo = 0x50,
        Ivory = 0x51,
        Khaki = 0x52,
        Lavender = 0x53,
        LavenderBlush = 0x54,
        LawnGreen = 0x55,
        LemonChiffon = 0x56,
        LightBlue = 0x57,
        LightCoral = 0x58,
        LightCyan = 0x59,
        LightGoldenrodYellow = 0x5a,
        LightGreen = 0x5b,
        LightGray = 0x5c,
        LightPink = 0x5d,
        LightSalmon = 0x5e,
        LightSeaGreen = 0x5f,
        LightSkyBlue = 0x60,
        LightSlateGray = 0x61,
        LightSteelBlue = 0x62,
        LightYellow = 0x63,
        Lime = 0x64,
        LimeGreen = 0x65,
        Linen = 0x66,
        Fuchsia = 0x67,
        Maroon = 0x68,
        MediumAquamarine = 0x69,
        MediumBlue = 0x6a,
        MediumOrchid = 0x6b,
        MediumPurple = 0x6c,
        MediumSeaGreen = 0x6d,
        MediumSlateBlue = 0x6e,
        MediumSpringGreen = 0x6f,
        MediumTurquoise = 0x70,
        MediumVioletRed = 0x71,
        MidnightBlue = 0x72,
        MintCream = 0x73,
        MistyRose = 0x74,
        Moccasin = 0x75,
        NavajoWhite = 0x76,
        Navy = 0x77,
        OldLace = 0x78,
        Olive = 0x79,
        OliveDrab = 0x7a,
        Orange = 0x7b,
        OrangeRed = 0x7c,
        Orchid = 0x7d,
        PaleGoldenrod = 0x7e,
        PaleGreen = 0x7f,
        PaleTurquoise = 0x80,
        PaleVioletRed = 0x81,
        PapayaWhip = 0x82,
        PeachPuff = 0x83,
        Peru = 0x84,
        Pink = 0x85,
        Plum = 0x86,
        PowderBlue = 0x87,
        Purple = 0x88,
        Red = 0x89,
        RosyBrown = 0x8a,
        RoyalBlue = 0x8b,
        SaddleBrown = 0x8c,
        Salmon = 0x8d,
        SandyBrown = 0x8e,
        SeaGreen = 0x8f,
        SeaShell = 0x90,
        Sienna = 0x91,
        Silver = 0x92,
        SkyBlue = 0x93,
        SlateBlue = 0x94,
        SlateGray = 0x95,
        Snow = 0x96,
        SpringGreen = 0x97,
        SteelBlue = 0x98,
        Tan = 0x99,
        Teal = 0x9a,
        Thistle = 0x9b,
        Tomato = 0x9c,
        Turquoise = 0x9d,
        Violet = 0x9e,
        Wheat = 0x9f,
        White = 0xa0,
        WhiteSmoke = 0xa1,
        Yellow = 0xa2,
        YellowGreen = 0xa3,
        Specified = 0xa4
    };
    
    class ColorValue
    {
    public:
        ColorValue(ColorKeyword aKeyword);
        ColorValue(CSSOMString hex);
        ColorValue(unsigned char aRed, unsigned char aGreen, unsigned char aBlue);
        ColorValue(unsigned char aRed, unsigned char aGreen, unsigned char aBlue, unsigned char aAlpha);
        ColorValue(ColorValue& ref);
        ColorValue();
    
        ColorKeyword keyword() const;
        void setKeyword(ColorKeyword aKeyword);
    
        long color() const;
        void setColor(long aColor);
    
        unsigned char red();
        void setRed(unsigned char aRed);
    
        unsigned char green();
        void setGreen(unsigned char aGreen);
    
        unsigned char blue();
        void setBlue(unsigned char aBlue);
    
        unsigned char alpha() const;
        void setAlpha(unsigned char aAlpha);
    
        CSSOMString toString();
    
        static ColorValue fromString(CSSOMString str);
    
    
    
    protected:
        ColorKeyword mKeyword;
        long mColor;
        unsigned char mAlpha;
    
    };
    
    class IntegerValue
    {
    public:
        IntegerValue(short aKeyword  = 0);
        IntegerValue(IntegerValue& ref);
        IntegerValue();
    
        short keyword() const;
        void setKeyword(short aKeyword);
    
        long value() const;
        void setValue(long aValue);
    
        CSSOMString toString();
    
        static IntegerValue fromString(CSSOMString str);
    
    
    
    protected:
        short mKeyword;
        long mValue;
    
    };
    
    class FloatValue
    {
    public:
        FloatValue(short aKeyword  = 0);
        FloatValue(FloatValue& ref);
        FloatValue();
    
        short keyword() const;
        void setKeyword(short aKeyword);
    
        double value() const;
        void setValue(double aValue);
    
        CSSOMString toString();
    
        static IntegerValue fromString(CSSOMString str);
    
    
    
    protected:
        short mKeyword;
        double mValue;
    
    };
    
    class StringValue
    {
    public:
        StringValue(short aKeyword  = 0);
        StringValue(StringValue& ref);
        StringValue();
    
        short keyword() const;
        void setKeyword(short aKeyword);
    
        CSSOMString value() const;
        void setValue(CSSOMString aValue);
    
        CSSOMString toString();
    
        static StringValue fromString(CSSOMString str);
    
    
    
    protected:
        short mKeyword;
        CSSOMString mValue;
    
    };
    
    enum class AlignContent
    {
        FlexStart = 0xa5,
        FlexEnd = 0xa6,
        Center = 0xa7,
        SpaceBetween = 0xa8,
        SpaceAround = 0xa9,
        SpaceEvenly = 0xaa,
        Stretch = 0xab
    };
    
    enum class AlignItems
    {
        FlexStart = 0xac,
        FlexEnd = 0xad,
        Center = 0xae,
        Baseline = 0xaf,
        Stretch = 0xb0
    };
    
    enum class AlignSelf
    {
        Auto = 0xb1,
        FlexStart = 0xb2,
        FlexEnd = 0xb3,
        Center = 0xb4,
        Baseline = 0xb5,
        Stretch = 0xb6
    };
    
    enum class AnimationDirection
    {
        Normal = 0xb7,
        Reverse = 0xb8,
        Alternate = 0xb9,
        AlternateReverse = 0xba
    };
    
    enum class AnimationFillMode
    {
        None = 0xbb,
        Forwards = 0xbc,
        Backwards = 0xbd,
        Both = 0xbe
    };
    
    enum class AnimationPlayState
    {
        Paused = 0xbf,
        Running = 0xc0
    };
    
    enum class AnimationTimingFunctionType
    {
        Ease = 0xc1,
        EaseIn = 0xc2,
        EaseOut = 0xc3,
        EaseInOut = 0xc4,
        Linear = 0xc5,
        StepStart = 0xc6,
        StepEnd = 0xc7,
        Steps = 0xc8,
        CubicBezier = 0xc9,
         = 0xca
    };
    
    class CubicBezierFunction
    {
    public:
        CubicBezierFunction(CubicBezierFunction& ref);
        CubicBezierFunction();
    
        double item(unsigned long index);
    
        unsigned long length();
    
        void add(double number);
    
        void remove(unsigned long index);
    
        CSSOMString toString();
    
    
    
    protected:
    
    };
    
    class AnimationTimingFunction
    {
    public:
        AnimationTimingFunction(AnimationTimingFunctionType keyword);
        AnimationTimingFunction(CubicBezierFunction aCubicBezierFunction);
        AnimationTimingFunction(unsigned long aSteps);
        AnimationTimingFunction(AnimationTimingFunction& ref);
        AnimationTimingFunction();
    
        AnimationTimingFunctionType type() const;
        void setType(AnimationTimingFunctionType aType);
    
        CubicBezierFunction& cubicBezierFunction();
    
        unsigned long steps() const;
        void setSteps(unsigned long aSteps);
    
        CSSOMString toString();
    
        static AnimationTimingFunction fromString(CSSOMString str);
    
    
    
    protected:
        AnimationTimingFunctionType mType;
        CubicBezierFunction mCubicBezierFunction;
        unsigned long mSteps;
    
    };
    
    enum class BackfaceVisibility
    {
        Visible = 0xcb,
        Hidden = 0xcc
    };
    
    enum class BackgroundAttachmentAxis
    {
        Fixed = 0xcd,
        Scroll = 0xce,
        Local = 0xcf
    };
    
    enum class BackgroundClip
    {
        PaddingBox = 0xd0,
        BorderBox = 0xd1,
        ContentBox = 0xd2
    };
    
    enum class BackgroundImageType
    {
        Url = 0xd3,
        None = 0xd4
    };
    
    class BackgroundImage
    {
    public:
        BackgroundImage(USVString aUrl]);
        BackgroundImage(BackgroundImage& ref);
        BackgroundImage();
    
        BackgroundImageType type() const;
        void setType(BackgroundImageType aType);
    
        USVString url() const;
        void setUrl(USVString aUrl);
    
        CSSOMString toString();
    
        static BackgroundImage fromString(CSSOMString str);
    
    
    
    protected:
        BackgroundImageType mType;
        USVString mUrl;
    
    };
    
    enum class BackgroundOriginAxis
    {
        PaddingBox = 0xd5,
        BorderBox = 0xd6,
        ContentBox = 0xd7
    };
    
    enum class BackgroundPositionType
    {
        Left = 0xd8,
        Center = 0xd9,
        Right = 0xda,
        Top = 0xdb,
        Bottom = 0xdc,
        Number = 0xdd
    };
    
    class BackgroundPositionAxis
    {
    public:
        BackgroundPositionAxis(BackgroundPositionType keyword);
        BackgroundPositionAxis(NumericValue aNumber);
        BackgroundPositionAxis(BackgroundPositionAxis& ref);
        BackgroundPositionAxis();
    
        BackgroundPositionType type() const;
        void setType(BackgroundPositionType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static BackgroundPositionAxis fromString(CSSOMString str);
    
    
    
    protected:
        BackgroundPositionType mType;
        NumericValue mNumber;
    
    };
    
    enum class BackgroundRepeatAxisType
    {
        NoRepeat = 0xde,
        Repeat = 0xdf,
        RepeatX = 0xe0,
        RepeatY = 0xe1,
        Space = 0xe2,
        Round = 0xe3,
        Amount = 0xe4
    };
    
    class BackgroundRepeatAxis
    {
    public:
        BackgroundRepeatAxis(BackgroundRepeatAxisType keyword);
        BackgroundRepeatAxis(unsigned long aAmount);
        BackgroundRepeatAxis(BackgroundRepeatAxis& ref);
        BackgroundRepeatAxis();
    
        BackgroundRepeatAxisType type() const;
        void setType(BackgroundRepeatAxisType aType);
    
        unsigned long amount() const;
        void setAmount(unsigned long aAmount);
    
        CSSOMString toString();
    
    
    
    protected:
        BackgroundRepeatAxisType mType;
        unsigned long mAmount;
    
    };
    
    class BackgroundRepeat
    {
    public:
        BackgroundRepeat(short aKeyword);
        BackgroundRepeat(BackgroundRepeatAxis aX);
        BackgroundRepeat(BackgroundRepeatAxis aX, BackgroundRepeatAxis aY);
        BackgroundRepeat(BackgroundRepeat& ref);
        BackgroundRepeat();
    
        short keyword() const;
        void setKeyword(short aKeyword);
    
        BackgroundRepeatAxis& x();
        void setX(BackgroundRepeatAxis& aX);
    
        BackgroundRepeatAxis& y();
        void setY(BackgroundRepeatAxis& aY);
    
        CSSOMString toString();
    
        static BackgroundRepeat fromString(CSSOMString str);
    
    
    
    protected:
        short mKeyword;
        BackgroundRepeatAxis mX;
        BackgroundRepeatAxis mY;
    
    };
    
    enum class BackgroundSizeType
    {
        Auto = 0xe5,
        Cover = 0xe6,
        Contain = 0xe7,
        Number = 0xe8
    };
    
    class BackgroundSizeAxis
    {
    public:
        BackgroundSizeAxis(BackgroundSizeType keyword);
        BackgroundSizeAxis(NumericValue aNumber);
        BackgroundSizeAxis(BackgroundSizeAxis& ref);
        BackgroundSizeAxis();
    
        BackgroundSizeType type() const;
        void setType(BackgroundSizeType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
    
    
    protected:
        BackgroundSizeType mType;
        NumericValue mNumber;
    
    };
    
    class BackgroundSize
    {
    public:
        BackgroundSize(short keyword);
        BackgroundSize(BackgroundSizeAxis aX);
        BackgroundSize(BackgroundSizeAxis aX, BackgroundSizeAxis aY);
        BackgroundSize(BackgroundSize& ref);
        BackgroundSize();
    
        short aKeyword() const;
        void setAKeyword(short aAKeyword);
    
        BackgroundSizeAxis& x();
        void setX(BackgroundSizeAxis& aX);
    
        BackgroundSizeAxis& y();
        void setY(BackgroundSizeAxis& aY);
    
        CSSOMString toString();
    
        static BackgroundSize fromString(CSSOMString str);
    
    
    
    protected:
        short mAKeyword;
        BackgroundSizeAxis mX;
        BackgroundSizeAxis mY;
    
    };
    
    enum class BorderStyle
    {
        None = 0xe9,
        Hidden = 0xea,
        Dotted = 0xeb,
        Dashed = 0xec,
        Solid = 0xed,
        Double = 0xee,
        Groove = 0xef,
        Ridge = 0xf0,
        Inset = 0xf1,
        Outset = 0xf2
    };
    
    class BorderRadius
    {
    public:
        BorderRadius(short aKeyword);
        BorderRadius(NumericValue aVertical);
        BorderRadius(NumericValue aVertical, NumericValue aHorizontal);
        BorderRadius(BorderRadius& ref);
        BorderRadius();
    
        short keyword() const;
        void setKeyword(short aKeyword);
    
        NumericValue& vertical();
        void setVertical(NumericValue& aVertical);
    
        NumericValue& horizontal();
        void setHorizontal(NumericValue& aHorizontal);
    
        CSSOMString toString();
    
        static BorderRadius fromString(CSSOMString str);
    
    
    
    protected:
        short mKeyword;
        NumericValue mVertical;
        NumericValue mHorizontal;
    
    };
    
    enum class BorderCollapse
    {
        Collapse = 0xf3,
        Separate = 0xf4
    };
    
    typedef BorderRadius BorderSpacing;
    
    enum class BoxSizing
    {
        ContentBox = 0xf5,
        BorderBox = 0xf6
    };
    
    class Shadow
    {
    public:
        Shadow(bool aInset, long aOffsetX, long aOffsetY, unsigned long aBlur, long aStretch, ColorValue aColor);
        Shadow(Shadow& ref);
        Shadow();
    
        bool& inset();
        void setInset(bool& aInset);
    
        long offsetX() const;
        void setOffsetX(long aOffsetX);
    
        long offsetY() const;
        void setOffsetY(long aOffsetY);
    
        unsigned long blur() const;
        void setBlur(unsigned long aBlur);
    
        long stretch() const;
        void setStretch(long aStretch);
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
    
    
    protected:
        bool mInset;
        long mOffsetX;
        long mOffsetY;
        unsigned long mBlur;
        long mStretch;
        ColorValue mColor;
    
    };
    
    class ShadowList
    {
    public:
        ShadowList(ShadowList& ref);
        ShadowList();
    
        Shadow* item(unsigned long index);
    
        unsigned long length();
    
        void add(Shadow shadow);
    
        void remove(unsigned long index);
    
    
    
    protected:
    
    };
    
    enum class BoxShadowType
    {
        None = 0xf7,
        Specified = 0xf8
    };
    
    class BoxShadow
    {
    public:
        BoxShadow(BoxShadow& ref);
        BoxShadow();
    
        BoxShadowType type() const;
        void setType(BoxShadowType aType);
    
        ShadowList& shadows();
    
        CSSOMString toString();
    
        static BoxShadow fromString(CSSOMString str);
    
    
    
    protected:
        BoxShadowType mType;
        ShadowList mShadows;
    
    };
    
    enum class CaptionSide
    {
        Top = 0xf9,
        Bottom = 0xfa,
        Left = 0xfb,
        Right = 0xfc
    };
    
    enum class Clear
    {
        None = 0xfd,
        Left = 0xfe,
        Right = 0xff,
        Both = 0x100
    };
    
    enum class ClipType
    {
        Auto = 0x101,
        Specified = 0x102
    };
    
    class Rect
    {
    public:
        Rect(long aY1, long aX2, long aY2, long aX1);
        Rect(Rect& ref);
        Rect();
    
        const long Auto = -1;
    
        long y1() const;
        void setY1(long aY1);
    
        long x2() const;
        void setX2(long aX2);
    
        long y2() const;
        void setY2(long aY2);
    
        long x1() const;
        void setX1(long aX1);
    
    
    
    protected:
        long mY1;
        long mX2;
        long mY2;
        long mX1;
    
    };
    
    class Clip
    {
    public:
        Clip(Rect aRect);
        Clip(Clip& ref);
        Clip();
    
        ClipType type() const;
        void setType(ClipType aType);
    
        Rect& rect();
        void setRect(Rect& aRect);
    
        CSSOMString toString();
    
        static Clip fromString(CSSOMString str);
    
    
    
    protected:
        ClipType mType;
        Rect mRect;
    
    };
    
    enum class ColumnSpan
    {
        One = 0x103,
        All = 0x104
    };
    
    typedef BorderStyle ColumnRuleStyle;
    
    enum class CounterType
    {
        None = 0x105,
        Specified = 0x106
    };
    
    class Counter
    {
    public:
        Counter(CSSOMString identifer);
        Counter(Counter& ref);
        Counter();
    
        CounterType type() const;
        void setType(CounterType aType);
    
        CSSOMString identifer() const;
        void setIdentifer(CSSOMString aIdentifer);
    
        CSSOMString toString();
    
        static Counter fromString(CSSOMString str);
    
    
    
    protected:
        CounterType mType;
        CSSOMString mIdentifer;
    
    };
    
    enum class CursorVariant
    {
        Auto = 0x107,
        Crosshair = 0x108,
        Default = 0x109,
        EResize = 0x10a,
        Help = 0x10b,
        Move = 0x10c,
        NResize = 0x10d,
        NeResize = 0x10e,
        NwResize = 0x10f,
        Pointer = 0x110,
        Progress = 0x111,
        SResize = 0x112,
        SeResize = 0x113,
        SwResize = 0x114,
        Text = 0x115,
        WResize = 0x116,
        Wait = 0x117,
        Url = 0x118
    };
    
    class Cursor
    {
    public:
        Cursor(CursorVariant aVariant);
        Cursor(CSSOMString aUrl);
        Cursor(Cursor& ref);
        Cursor();
    
        CursorVariant variant() const;
        void setVariant(CursorVariant aVariant);
    
        CSSOMString url() const;
        void setUrl(CSSOMString aUrl);
    
        CSSOMString toString();
    
        static Cursor fromString(CSSOMString str);
    
    
    
    protected:
        CursorVariant mVariant;
        CSSOMString mUrl;
    
    };
    
    enum class Direction
    {
        Ltr = 0x119,
        Rtl = 0x11a
    };
    
    enum class Display
    {
        Block = 0x11b,
        Inline = 0x11c,
        Flow = 0x11d,
        FlowRoot = 0x11e,
        Table = 0x11f,
        Flex = 0x120,
        Grid = 0x121,
        ListItem = 0x122,
        TableRowGroup = 0x123,
        TableHeaderGroup = 0x124,
        TableFooterGroup = 0x125,
        TableRow = 0x126,
        TableCell = 0x127,
        TableColumnGroup = 0x128,
        TableColumn = 0x129,
        TableCaption = 0x12a,
        Contents = 0x12b,
        None = 0x12c,
        InlineBlock = 0x12d,
        InlineTable = 0x12e,
        InlineFlex = 0x12f,
        InlineGrid = 0x130
    };
    
    enum class EmptyCells
    {
        Show = 0x131,
        Hide = 0x132
    };
    
    enum class FlexBasisType
    {
        Auto = 0x133,
        Fill = 0x134,
        MaxContent = 0x135,
        MinContent = 0x136,
        FitContent = 0x137,
        Content = 0x138,
        Number = 0x139
    };
    
    class FlexBasis
    {
    public:
        FlexBasis(FlexBasisType keyword);
        FlexBasis(NumericValue aNumber);
        FlexBasis(FlexBasis& ref);
        FlexBasis();
    
        FlexBasisType type() const;
        void setType(FlexBasisType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static FlexBasis fromString(CSSOMString str);
    
    
    
    protected:
        FlexBasisType mType;
        NumericValue mNumber;
    
    };
    
    enum class FlexDirection
    {
        Row = 0x13a,
        RowReverse = 0x13b,
        Column = 0x13c,
        ColumnReverse = 0x13d
    };
    
    enum class FlexWrap
    {
        Nowrap = 0x13e,
        Wrap = 0x13f,
        WrapReverse = 0x140
    };
    
    enum class Float
    {
        Left = 0x141,
        Right = 0x142,
        None = 0x143
    };
    
    enum class FontOptionKeywordValue
    {
        NumberInsteadOfKeyword = 0x144,
        On = 0x145,
        Off = 0x146
    };
    
    class OpenTypeFontOption
    {
    public:
        OpenTypeFontOption(CSSOMString id, FontOptionKeywordValue keyword);
        OpenTypeFontOption(CSSOMString id, long num);
        OpenTypeFontOption(OpenTypeFontOption& ref);
        OpenTypeFontOption();
    
        CSSOMString optionID() const;
        void setOptionID(CSSOMString aOptionID);
    
        FontOptionKeywordValue keywordValue() const;
        void setKeywordValue(FontOptionKeywordValue aKeywordValue);
    
        long value() const;
        void setValue(long aValue);
    
    
    
    protected:
        CSSOMString mOptionID;
        FontOptionKeywordValue mKeywordValue;
        long mValue;
    
    };
    
    class OpenTypeFontOptionList
    {
    public:
        OpenTypeFontOptionList(OpenTypeFontOptionList& ref);
        OpenTypeFontOptionList();
    
        OpenTypeFontOption* item(unsigned long index);
    
        unsigned long length();
    
        void add(OpenTypeFontOption option);
    
        void remove(unsigned long index);
    
    
    
    protected:
    
    };
    
    enum class FontFeatureSettingsType
    {
        Specified = 0x147
    };
    
    class FontFeatureSettings
    {
    public:
        FontFeatureSettings(FontFeatureSettingsType keyword);
        FontFeatureSettings(FontFeatureSettings& ref);
        FontFeatureSettings();
    
        FontFeatureSettingsType type() const;
    
        OpenTypeFontOptionList& options();
    
        CSSOMString toString();
    
        static FontFeatureSettings fromString(CSSOMString str);
    
    
    
    protected:
        FontFeatureSettingsType mType;
        OpenTypeFontOptionList mOptions;
    
    };
    
    enum class FontKerning
    {
        Auto = 0x148,
        Normal = 0x149,
        None = 0x14a
    };
    
    enum class FontStretch
    {
        UltraCondensed = 0x14b,
        ExtraCondensed = 0x14c,
        Condensed = 0x14d,
        SemiCondensed = 0x14e,
        Normal = 0x14f,
        SemiExpanded = 0x150,
        Expanded = 0x151,
        ExtraExpanded = 0x152,
        UltraExpanded = 0x153
    };
    
    enum class FontStyle
    {
        Normal = 0x154,
        Italic = 0x155,
        Oblique = 0x156
    };
    
    enum class FontVariant
    {
        Normal = 0x157,
        SmallCaps = 0x158
    };
    
    enum class FontWeightType
    {
        Normal = 0x159,
        Bold = 0x15a,
        Bolder = 0x15b,
        Lighter = 0x15c,
        Number = 0x15d
    };
    
    class FontWeight
    {
    public:
        FontWeight(FontWeightType keyword);
        FontWeight(unsigned long aNumber);
        FontWeight(FontWeight& ref);
        FontWeight();
    
        FontWeightType type() const;
        void setType(FontWeightType aType);
    
        unsigned long number() const;
        void setNumber(unsigned long aNumber);
    
        CSSOMString toString();
    
        static FontWeight fromString(CSSOMString str);
    
    
    
    protected:
        FontWeightType mType;
        unsigned long mNumber;
    
    };
    
    enum class Hyphens
    {
        None = 0x15e,
        Manual = 0x15f,
        Auto = 0x160
    };
    
    enum class JustifyContent
    {
        FlexStart = 0x161,
        FlexEnd = 0x162,
        Center = 0x163,
        SpaceBetween = 0x164,
        SpaceAround = 0x165,
        SpaceEvenly = 0x166,
        Stretch = 0x167
    };
    
    enum class JustifyItems
    {
        FlexStart = 0x168,
        FlexEnd = 0x169,
        Center = 0x16a,
        Baseline = 0x16b,
        Stretch = 0x16c
    };
    
    enum class JustifySelf
    {
        Auto = 0x16d,
        FlexStart = 0x16e,
        FlexEnd = 0x16f,
        Center = 0x170,
        Baseline = 0x171,
        Stretch = 0x172
    };
    
    enum class LetterSpacingType
    {
        Normal = 0x173,
        Number = 0x174
    };
    
    class LetterSpacing
    {
    public:
        LetterSpacing(LetterSpacingType keyword);
        LetterSpacing(NumericValue aNumber);
        LetterSpacing(LetterSpacing& ref);
        LetterSpacing();
    
        LetterSpacingType type() const;
        void setType(LetterSpacingType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static LetterSpacing fromString(CSSOMString str);
    
    
    
    protected:
        LetterSpacingType mType;
        NumericValue mNumber;
    
    };
    
    typedef LetterSpacing LineHeight;
    
    enum class LineBreak
    {
        Auto = 0x175,
        Loose = 0x176,
        Normal = 0x177,
        Strict = 0x178
    };
    
    typedef BackgroundImage ListStyleImage;
    
    enum class ListStylePosition
    {
        Inside = 0x179,
        Outside = 0x17a
    };
    
    enum class ListStyleType
    {
        Circle = 0x17b,
        Disc = 0x17c,
        Square = 0x17d,
        Armenian = 0x17e,
        Decimal = 0x17f,
        DecimalLeadingZero = 0x180,
        Georgian = 0x181,
        LowerAlpha = 0x182,
        LowerGreek = 0x183,
        LowerLatin = 0x184,
        LowerRoman = 0x185,
        UpperAlpha = 0x186,
        UpperLatin = 0x187,
        UpperRoman = 0x188,
        None = 0x189
    };
    
    typedef BorderStyle OutlineStyle;
    
    enum class OverflowWrap
    {
        Normal = 0x18a,
        BreakWord = 0x18b
    };
    
    enum class Overflow
    {
        Auto = 0x18c,
        Hidden = 0x18d,
        Scroll = 0x18e,
        Visible = 0x18f
    };
    
    enum class PageBreakAfter
    {
        Always = 0x190,
        Auto = 0x191,
        Avoid = 0x192,
        Left = 0x193,
        Right = 0x194
    };
    
    typedef PageBreakAfter PageBreakBefore;
    
    enum class PageBreakInside
    {
        Auto = 0x195,
        Avoid = 0x196
    };
    
    enum class PerspectiveType
    {
        None = 0x197,
        Number = 0x198
    };
    
    class Perspective
    {
    public:
        Perspective(PerspectiveType keyword);
        Perspective(NumericValue aNumber);
        Perspective(Perspective& ref);
        Perspective();
    
        PerspectiveType type() const;
        void setType(PerspectiveType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static NumericValue fromString(CSSOMString str);
    
    
    
    protected:
        PerspectiveType mType;
        NumericValue mNumber;
    
    };
    
    enum class PerspectiveOriginType
    {
        Left = 0x199,
        Center = 0x19a,
        Right = 0x19b,
        Top = 0x19c,
        Bottom = 0x19d,
        Number = 0x19e
    };
    
    class PerspectiveOriginAxis
    {
    public:
        PerspectiveOriginAxis(PerspectiveOriginType keyword);
        PerspectiveOriginAxis(NumericValue aNumber);
        PerspectiveOriginAxis(PerspectiveOriginAxis& ref);
        PerspectiveOriginAxis();
    
        PerspectiveOriginType type() const;
        void setType(PerspectiveOriginType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
    
    
    protected:
        PerspectiveOriginType mType;
        NumericValue mNumber;
    
    };
    
    class PerspectiveOrigin
    {
    public:
        PerspectiveOrigin(short keyword);
        PerspectiveOrigin(PerspectiveOriginAxis aX);
        PerspectiveOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY);
        PerspectiveOrigin(PerspectiveOrigin& ref);
        PerspectiveOrigin();
    
        short aKeyword() const;
        void setAKeyword(short aAKeyword);
    
        PerspectiveOriginAxis& x();
        void setX(PerspectiveOriginAxis& aX);
    
        PerspectiveOriginAxis& y();
        void setY(PerspectiveOriginAxis& aY);
    
        CSSOMString toString();
    
        static PerspectiveOrigin fromString(CSSOMString str);
    
    
    
    protected:
        short mAKeyword;
        PerspectiveOriginAxis mX;
        PerspectiveOriginAxis mY;
    
    };
    
    enum class Position
    {
        Absolute = 0x19f,
        Fixed = 0x1a0,
        Relative = 0x1a1,
        Static = 0x1a2,
        Sticky = 0x1a3
    };
    
    enum class QuotesType
    {
        None = 0x1a4,
        Specified = 0x1a5
    };
    
    class Quotes
    {
    public:
        Quotes(QuotesType keyword);
        Quotes(signed char aAfter);
        Quotes(signed char aAfter, signed char aBefore);
        Quotes(Quotes& ref);
        Quotes();
    
        QuotesType aType() const;
        void setAType(QuotesType aAType);
    
        signed char after() const;
        void setAfter(signed char aAfter);
    
        signed char before() const;
        void setBefore(signed char aBefore);
    
        CSSOMString toString();
    
        static Quotes fromString(CSSOMString str);
    
    
    
    protected:
        QuotesType mAType;
        signed char mAfter;
        signed char mBefore;
    
    };
    
    enum class Resize
    {
        None = 0x1a6,
        Both = 0x1a7,
        Horizontal = 0x1a8,
        Vertical = 0x1a9
    };
    
    enum class SizeType
    {
        Left = 0x1aa,
        Center = 0x1ab,
        Right = 0x1ac,
        Top = 0x1ad,
        Bottom = 0x1ae,
        Number = 0x1af
    };
    
    class SizeOf
    {
    public:
        SizeOf(SizeType keyword);
        SizeOf(NumericValue aNumber);
        SizeOf(SizeOf& ref);
        SizeOf();
    
        SizeType type() const;
        void setType(SizeType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
    
    
    protected:
        SizeType mType;
        NumericValue mNumber;
    
    };
    
    class Size
    {
    public:
        Size(short keyword);
        Size(SizeOf aWidth);
        Size(SizeOf aWidth, SizeOf aHeight);
        Size(Size& ref);
        Size();
    
        short aKeyword() const;
        void setAKeyword(short aAKeyword);
    
        SizeOf& width();
        void setWidth(SizeOf& aWidth);
    
        SizeOf& height();
        void setHeight(SizeOf& aHeight);
    
        CSSOMString toString();
    
        static Size fromString(CSSOMString str);
    
    
    
    protected:
        short mAKeyword;
        SizeOf mWidth;
        SizeOf mHeight;
    
    };
    
    enum class TableLayout
    {
        Auto = 0x1b0,
        Fixed = 0x1b1
    };
    
    enum class TextAlign
    {
        Center = 0x1b2,
        Justify = 0x1b3,
        Left = 0x1b4,
        Right = 0x1b5,
        Start = 0x1b6,
        End = 0x1b7
    };
    
    enum class TextDecoration
    {
        LineThrough = 0x1b8,
        Overline = 0x1b9,
        Underline = 0x1ba,
        None = 0x1bb
    };
    
    enum class TextOverflow
    {
        Clip = 0x1bc,
        Ellipsis = 0x1bd
    };
    
    typedef BoxShadow TextShadow;
    
    enum class TextTransform
    {
        Capitalize = 0x1be,
        Lowercase = 0x1bf,
        Uppercase = 0x1c0,
        None = 0x1c1
    };
    
    class TransformOrigin
    {
    public:
        TransformOrigin(short keyword);
        TransformOrigin(PerspectiveOriginAxis aX);
        TransformOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY);
        TransformOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY, PerspectiveOriginAxis aZ);
        TransformOrigin(TransformOrigin& ref);
        TransformOrigin();
    
        short aKeyword() const;
        void setAKeyword(short aAKeyword);
    
        PerspectiveOriginAxis& x();
        void setX(PerspectiveOriginAxis& aX);
    
        PerspectiveOriginAxis& y();
        void setY(PerspectiveOriginAxis& aY);
    
        PerspectiveOriginAxis& z();
        void setZ(PerspectiveOriginAxis& aZ);
    
        CSSOMString toString();
    
        static TransformOrigin fromString(CSSOMString str);
    
    
    
    protected:
        short mAKeyword;
        PerspectiveOriginAxis mX;
        PerspectiveOriginAxis mY;
        PerspectiveOriginAxis mZ;
    
    };
    
    enum class TransformStyle
    {
        Flat = 0x1c2,
        Preserve3d = 0x1c3
    };
    
    enum class TransformType
    {
        None = 0x1c4,
        Specified = 0x1c5
    };
    
    class TransformModifier
    {
    public:
        TransformModifier(unsigned short type);
        TransformModifier(TransformModifier& ref);
        TransformModifier();
    
        const unsigned short TRANSFORM_MATRIX = 1;
    
        const unsigned short TRANSFORM_ROTATE = 2;
    
        const unsigned short TRANSFORM_SCALE = 3;
    
        const unsigned short TRANSFORM_SCALE_X = 4;
    
        const unsigned short TRANSFORM_SCALE_Y = 5;
    
        const unsigned short TRANSFORM_SKEW_X = 6;
    
        const unsigned short TRANSFORM_SKEW_Y = 7;
    
        const unsigned short TRANSFORM_TRANSLATE = 8;
    
        const unsigned short TRANSFORM_TRANSLATE_X = 9;
    
        const unsigned short TRANSFORM_TRANSLATE_Y = 10;
    
        unsigned short transformType() const;
    
        Transform* owner() const;
    
        CSSOMString toString();
    
        void remove();
    
    
    
    protected:
        unsigned short mTransformType;
        Transform* mOwner;
    
    };
    
    class TransformMatrix : public TransformModifier
    {
    public:
        TransformMatrix(double aA, double aB, double aC, double aD, double aTx, double aTy);
        TransformMatrix(TransformMatrix& ref);
        TransformMatrix();
    
        double a() const;
        void setA(double aA);
    
        double b() const;
        void setB(double aB);
    
        double c() const;
        void setC(double aC);
    
        double d() const;
        void setD(double aD);
    
        double tx() const;
        void setTx(double aTx);
    
        double ty() const;
        void setTy(double aTy);
    
        static TransformMatrix fromString(CSSOMString str);
    
    
    
    protected:
        double mA;
        double mB;
        double mC;
        double mD;
        double mTx;
        double mTy;
    
    };
    
    class TransformRotate : public TransformModifier
    {
    public:
        TransformRotate(NumericValue aAngle);
        TransformRotate(TransformRotate& ref);
        TransformRotate();
    
        NumericValue& angle();
        void setAngle(NumericValue& aAngle);
    
        static TransformRotate fromString(CSSOMString str);
    
    
    
    protected:
        NumericValue mAngle;
    
    };
    
    class TransformScale : public TransformModifier
    {
    public:
        TransformScale(double aSx, double aSy = 0);
        TransformScale(TransformScale& ref);
        TransformScale();
    
        double sx() const;
        void setSx(double aSx);
    
        double sy() const;
        void setSy(double aSy);
    
        static TransformScale fromString(CSSOMString str);
    
    
    
    protected:
        double mSx;
        double mSy;
    
    };
    
    class TransformScaleX : public TransformModifier
    {
    public:
        TransformScaleX(double aSx);
        TransformScaleX(TransformScaleX& ref);
        TransformScaleX();
    
        double sx() const;
        void setSx(double aSx);
    
        static TransformScaleX fromString(CSSOMString str);
    
    
    
    protected:
        double mSx;
    
    };
    
    class TransformScaleY : public TransformModifier
    {
    public:
        TransformScaleY(double aSy);
        TransformScaleY(TransformScaleY& ref);
        TransformScaleY();
    
        double sy() const;
        void setSy(double aSy);
    
        static TransformScaleY fromString(CSSOMString str);
    
    
    
    protected:
        double mSy;
    
    };
    
    class TransformSkewX : public TransformModifier
    {
    public:
        TransformSkewX(NumericValue aAngle);
        TransformSkewX(TransformSkewX& ref);
        TransformSkewX();
    
        NumericValue& angle();
        void setAngle(NumericValue& aAngle);
    
        static TransformSkewX fromString(CSSOMString str);
    
    
    
    protected:
        NumericValue mAngle;
    
    };
    
    class TransformSkewY : public TransformModifier
    {
    public:
        TransformSkewY(NumericValue aAngle);
        TransformSkewY(TransformSkewY& ref);
        TransformSkewY();
    
        NumericValue& angle();
        void setAngle(NumericValue& aAngle);
    
        static TransformSkewY fromString(CSSOMString str);
    
    
    
    protected:
        NumericValue mAngle;
    
    };
    
    class TransformTranslate : public TransformModifier
    {
    public:
        TransformTranslate(double aTx, double aTy = 0);
        TransformTranslate(TransformTranslate& ref);
        TransformTranslate();
    
        double tx() const;
        void setTx(double aTx);
    
        double ty() const;
        void setTy(double aTy);
    
        static TransformTranslate fromString(CSSOMString str);
    
    
    
    protected:
        double mTx;
        double mTy;
    
    };
    
    class TransformTranslateX : public TransformModifier
    {
    public:
        TransformTranslateX(double aTx);
        TransformTranslateX(TransformTranslateX& ref);
        TransformTranslateX();
    
        double tx() const;
        void setTx(double aTx);
    
        static TransformTranslateX fromString(CSSOMString str);
    
    
    
    protected:
        double mTx;
    
    };
    
    class TransformTranslateY : public TransformModifier
    {
    public:
        TransformTranslateY(double aTy);
        TransformTranslateY(TransformTranslateY& ref);
        TransformTranslateY();
    
        double ty() const;
        void setTy(double aTy);
    
        static TransformTranslateY fromString(CSSOMString str);
    
    
    
    protected:
        double mTy;
    
    };
    
    class TransformList
    {
    public:
        TransformList(TransformList& ref);
        TransformList();
    
        TransformModifier* item(unsigned long index);
    
        unsigned long length();
    
        void appendModifier(TransformModifier* modifier);
    
        TransformModifier* removeModifier(unsigned long index);
    
    
    
    protected:
    
    };
    
    class Transform
    {
    public:
        Transform(TransformType keyword);
        Transform(Transform& ref);
        Transform();
    
        TransformType type() const;
        void setType(TransformType aType);
    
        TransformList& modifiers();
    
        CSSOMString toString();
    
        static Transform fromString(CSSOMString str);
    
    
    
    protected:
        TransformType mType;
        TransformList mModifiers;
    
    };
    
    enum class TransitionPropertyType
    {
        None = 0x1c6,
        All = 0x1c7,
        Specified = 0x1c8
    };
    
    class PropertyList
    {
    public:
        PropertyList(PropertyList& ref);
        PropertyList();
    
        CSSOMString item(unsigned long index);
    
        unsigned long length();
    
        void add(CSSOMString property);
    
        void remove(unsigned long index);
    
        CSSOMString toString();
    
    
    
    protected:
    
    };
    
    class TransitionProperty
    {
    public:
        TransitionProperty(TransitionPropertyType keyword);
        TransitionProperty(TransitionProperty& ref);
        TransitionProperty();
    
        TransitionPropertyType type() const;
        void setType(TransitionPropertyType aType);
    
        PropertyList& properties();
        void setProperties(PropertyList& aProperties);
    
    
    
    protected:
        TransitionPropertyType mType;
        PropertyList mProperties;
    
    };
    
    typedef AnimationTimingFunction TransitionTimingFunction;
    
    enum class UnicodeBidi
    {
        Normal = 0x1c9,
        Embed = 0x1ca,
        BidiOverride = 0x1cb
    };
    
    enum class VerticalAlignType
    {
        Baseline = 0x1cc,
        Bottom = 0x1cd,
        Middle = 0x1ce,
        Sub = 0x1cf,
        Super = 0x1d0,
        TextBottom = 0x1d1,
        TextTop = 0x1d2,
        top = 0x1d3
    };
    
    class VerticalAlign
    {
    public:
        VerticalAlign(VerticalAlignType keyword);
        VerticalAlign(NumericValue aNumber);
        VerticalAlign(VerticalAlign& ref);
        VerticalAlign();
    
        VerticalAlignType type() const;
        void setType(VerticalAlignType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static VerticalAlign fromString(CSSOMString str);
    
    
    
    protected:
        VerticalAlignType mType;
        NumericValue mNumber;
    
    };
    
    enum class Visibility
    {
        Visible = 0x1d4,
        Hidden = 0x1d5,
        Collapse = 0x1d6
    };
    
    enum class WhiteSpace
    {
        Normal = 0x1d7,
        Nowrap = 0x1d8,
        Pre = 0x1d9,
        PreLine = 0x1da,
        PreWrap = 0x1db
    };
    
    typedef LineBreak WordBreak;
    
    typedef LetterSpacing WordSpacing;
    
    enum class WordWrap
    {
        Normal = 0x1dc,
        BreakWord = 0x1dd
    };
    
    enum class TextAnchor
    {
        Start = 0x1de,
        Middle = 0x1df,
        End = 0x1e0
    };
    
    enum class FillRule
    {
        Nonzero = 0x1e1,
        Evenodd = 0x1e2
    };
    
    typedef BackgroundImage Marker;
    
    enum class RadiusAxisType
    {
        None = 0x1e3,
        Number = 0x1e4
    };
    
    class RadiusAxis
    {
    public:
        RadiusAxis(RadiusAxisType keyword);
        RadiusAxis(NumericValue aNumber);
        RadiusAxis(RadiusAxis& ref);
        RadiusAxis();
    
        RadiusAxisType type() const;
        void setType(RadiusAxisType aType);
    
        NumericValue& number();
        void setNumber(NumericValue& aNumber);
    
        CSSOMString toString();
    
        static RadiusAxis fromString(CSSOMString str);
    
    
    
    protected:
        RadiusAxisType mType;
        NumericValue mNumber;
    
    };
    
    enum class PathDataType
    {
        None = 0x1e5,
        Specified = 0x1e6
    };
    
    class PathData
    {
    public:
        PathData(PathDataType keyword);
        PathData(CSSOMString aPath);
        PathData(PathData& ref);
        PathData();
    
        PathDataType type() const;
        void setType(PathDataType aType);
    
        CSSOMString path() const;
        void setPath(CSSOMString aPath);
    
        CSSOMString toString();
    
        static PathData fromString(CSSOMString str);
    
    
    
    protected:
        PathDataType mType;
        CSSOMString mPath;
    
    };
    
    class Dasharray
    {
    public:
        Dasharray(Dasharray& ref);
        Dasharray();
    
        NumericValue item(unsigned long index);
    
        unsigned long length();
    
        void add(NumericValue property);
    
        void remove(unsigned long index);
    
        CSSOMString toString();
    
        static Dasharray fromString(CSSOMString str);
    
    
    
    protected:
    
    };
    
    enum class StrokeLinecap
    {
        Butt = 0x1e7,
        Round = 0x1e8,
        Square = 0x1e9
    };
    
    enum class StrokeLinejoin
    {
        Miter = 0x1ea,
        MiterClip = 0x1eb,
        Round = 0x1ec,
        Bevel = 0x1ed,
        Arcs = 0x1ee
    };
    
    class ElementStyleMetrics : public StyleMetrics
    {
    public:
        ElementStyleMetrics(CSSStyleDeclaration* decl);
        ElementStyleMetrics(ElementStyleMetrics& ref);
        ElementStyleMetrics();
    
        const AnimationIterationCount& Infinite = -1;
    
        AlignContent alignContent() const;
        void setAlignContent(AlignContent aAlignContent);
    
        AlignItems alignItems() const;
        void setAlignItems(AlignItems aAlignItems);
    
        AlignSelf alignSelf() const;
        void setAlignSelf(AlignSelf aAlignSelf);
    
        PeriodValue& animationDelay();
        void setAnimationDelay(PeriodValue& aAnimationDelay);
    
        AnimationDirection animationDirection() const;
        void setAnimationDirection(AnimationDirection aAnimationDirection);
    
        PeriodValue& animationDuration();
        void setAnimationDuration(PeriodValue& aAnimationDuration);
    
        AnimationFillMode animationFillMode() const;
        void setAnimationFillMode(AnimationFillMode aAnimationFillMode);
    
        IntegerValue& animationIterationCount();
        void setAnimationIterationCount(IntegerValue& aAnimationIterationCount);
    
        StringValue& animationName();
        void setAnimationName(StringValue& aAnimationName);
    
        AnimationPlayState animationPlayState() const;
        void setAnimationPlayState(AnimationPlayState aAnimationPlayState);
    
        AnimationTimingFunction& animationTimingFunction();
        void setAnimationTimingFunction(AnimationTimingFunction& aAnimationTimingFunction);
    
        BackfaceVisibility backfaceVisibility() const;
        void setBackfaceVisibility(BackfaceVisibility aBackfaceVisibility);
    
        BackgroundAttachment& backgroundAttachment();
        void setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment);
    
        BackgroundClip backgroundClip() const;
        void setBackgroundClip(BackgroundClip aBackgroundClip);
    
        ColorValue& backgroundColor();
        void setBackgroundColor(ColorValue& aBackgroundColor);
    
        BackgroundImage& backgroundImage();
        void setBackgroundImage(BackgroundImage& aBackgroundImage);
    
        BackgroundOriginAxis backgroundOriginX() const;
        void setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX);
    
        BackgroundOriginAxis backgroundOriginY() const;
        void setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY);
    
        BackgroundPositionAxis& backgroundPositionX();
        void setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX);
    
        BackgroundPositionAxis& backgroundPositionY();
        void setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY);
    
        BackgroundRepeat& backgroundRepeat();
        void setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat);
    
        BackgroundSize& backgroundSize();
        void setBackgroundSize(BackgroundSize& aBackgroundSize);
    
        ColorValue& borderBottomColor();
        void setBorderBottomColor(ColorValue& aBorderBottomColor);
    
        BorderRadius& borderBottomLeftRadius();
        void setBorderBottomLeftRadius(BorderRadius& aBorderBottomLeftRadius);
    
        BorderRadius& borderBottomRightRadius();
        void setBorderBottomRightRadius(BorderRadius& aBorderBottomRightRadius);
    
        BorderStyle borderBottomStyle() const;
        void setBorderBottomStyle(BorderStyle aBorderBottomStyle);
    
        NumericValue& borderBottomWidth();
        void setBorderBottomWidth(NumericValue& aBorderBottomWidth);
    
        BorderCollapse borderCollapse() const;
        void setBorderCollapse(BorderCollapse aBorderCollapse);
    
        ColorValue& borderLeftColor();
        void setBorderLeftColor(ColorValue& aBorderLeftColor);
    
        BorderStyle borderLeftStyle() const;
        void setBorderLeftStyle(BorderStyle aBorderLeftStyle);
    
        NumericValue& borderLeftWidth();
        void setBorderLeftWidth(NumericValue& aBorderLeftWidth);
    
        ColorValue& borderRightColor();
        void setBorderRightColor(ColorValue& aBorderRightColor);
    
        BorderStyle borderRightStyle() const;
        void setBorderRightStyle(BorderStyle aBorderRightStyle);
    
        NumericValue& borderRightWidth();
        void setBorderRightWidth(NumericValue& aBorderRightWidth);
    
        BorderSpacing& borderSpacing();
        void setBorderSpacing(BorderSpacing& aBorderSpacing);
    
        BorderStyle borderTopColor() const;
        void setBorderTopColor(BorderStyle aBorderTopColor);
    
        BorderRadius& borderTopLeftRadius();
        void setBorderTopLeftRadius(BorderRadius& aBorderTopLeftRadius);
    
        BorderRadius& borderTopRightRadius();
        void setBorderTopRightRadius(BorderRadius& aBorderTopRightRadius);
    
        BorderStyle borderTopStyle() const;
        void setBorderTopStyle(BorderStyle aBorderTopStyle);
    
        NumericValue& borderTopWidth();
        void setBorderTopWidth(NumericValue& aBorderTopWidth);
    
        NumericValue& bottom();
        void setBottom(NumericValue& aBottom);
    
        BoxShadow& boxShadow();
        void setBoxShadow(BoxShadow& aBoxShadow);
    
        BoxSizing boxSizing() const;
        void setBoxSizing(BoxSizing aBoxSizing);
    
        CaptionSide captionSide() const;
        void setCaptionSide(CaptionSide aCaptionSide);
    
        ColorValue& caretColor();
        void setCaretColor(ColorValue& aCaretColor);
    
        Clear clear() const;
        void setClear(Clear aClear);
    
        Clip& clip();
        void setClip(Clip& aClip);
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
        IntegerValue& columnCount();
        void setColumnCount(IntegerValue& aColumnCount);
    
        columnFill& columnFill();
        void setColumnFill(columnFill& aColumnFill);
    
        NumericValue& columnGap();
        void setColumnGap(NumericValue& aColumnGap);
    
        ColorValue& columnRuleColor();
        void setColumnRuleColor(ColorValue& aColumnRuleColor);
    
        ColumnRuleStyle& columnRuleStyle();
        void setColumnRuleStyle(ColumnRuleStyle& aColumnRuleStyle);
    
        NumericValue& columnRuleWidth();
        void setColumnRuleWidth(NumericValue& aColumnRuleWidth);
    
        ColumnSpan columnSpan() const;
        void setColumnSpan(ColumnSpan aColumnSpan);
    
        IntegerValue& columnWidth();
        void setColumnWidth(IntegerValue& aColumnWidth);
    
        Counter& counterIncrement();
        void setCounterIncrement(Counter& aCounterIncrement);
    
        Counter& counterReset();
        void setCounterReset(Counter& aCounterReset);
    
        Cursor& cursor();
        void setCursor(Cursor& aCursor);
    
        Direction direction() const;
        void setDirection(Direction aDirection);
    
        Display display() const;
        void setDisplay(Display aDisplay);
    
        EmptyCells emptyCells() const;
        void setEmptyCells(EmptyCells aEmptyCells);
    
        FlexBasis& flexBasis();
        void setFlexBasis(FlexBasis& aFlexBasis);
    
        FlexDirection flexDirection() const;
        void setFlexDirection(FlexDirection aFlexDirection);
    
        IntegerValue& flexGrow();
        void setFlexGrow(IntegerValue& aFlexGrow);
    
        IntegerValue& flexShrink();
        void setFlexShrink(IntegerValue& aFlexShrink);
    
        FlexWrap flexWrap() const;
        void setFlexWrap(FlexWrap aFlexWrap);
    
        Float cssFloat() const;
        void setCssFloat(Float aCssFloat);
    
        StringValue& fontFamily();
        void setFontFamily(StringValue& aFontFamily);
    
        FontFeatureSettings& fontFeatureSettings();
        void setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings);
    
        FontKerning fontKerning() const;
        void setFontKerning(FontKerning aFontKerning);
    
        NumericValue& fontSize();
        void setFontSize(NumericValue& aFontSize);
    
        FontStretch fontStretch() const;
        void setFontStretch(FontStretch aFontStretch);
    
        FontStyle fontStyle() const;
        void setFontStyle(FontStyle aFontStyle);
    
        FontVariant fontVariant() const;
        void setFontVariant(FontVariant aFontVariant);
    
        FontWeight& fontWeight();
        void setFontWeight(FontWeight& aFontWeight);
    
        NumericValue& height();
        void setHeight(NumericValue& aHeight);
    
        Hyphens hyphens() const;
        void setHyphens(Hyphens aHyphens);
    
        JustifyContent justifyContent() const;
        void setJustifyContent(JustifyContent aJustifyContent);
    
        JustifyItems justifyItems() const;
        void setJustifyItems(JustifyItems aJustifyItems);
    
        JustifySelf justifySelf() const;
        void setJustifySelf(JustifySelf aJustifySelf);
    
        NumericValue& left();
        void setLeft(NumericValue& aLeft);
    
        LetterSpacing& letterSpacing();
        void setLetterSpacing(LetterSpacing& aLetterSpacing);
    
        LineBreak lineBreak() const;
        void setLineBreak(LineBreak aLineBreak);
    
        LineHeight& lineHeight();
        void setLineHeight(LineHeight& aLineHeight);
    
        ListStyleImage& listStyleImage();
        void setListStyleImage(ListStyleImage& aListStyleImage);
    
        ListStylePosition listStylePosition() const;
        void setListStylePosition(ListStylePosition aListStylePosition);
    
        ListStyleType listStyleType() const;
        void setListStyleType(ListStyleType aListStyleType);
    
        NumericValue& marginBottom();
        void setMarginBottom(NumericValue& aMarginBottom);
    
        NumericValue& marginLeft();
        void setMarginLeft(NumericValue& aMarginLeft);
    
        NumericValue& marginRight();
        void setMarginRight(NumericValue& aMarginRight);
    
        NumericValue& marginTop();
        void setMarginTop(NumericValue& aMarginTop);
    
        NumericValue& maxHeight();
        void setMaxHeight(NumericValue& aMaxHeight);
    
        NumericValue& maxWidth();
        void setMaxWidth(NumericValue& aMaxWidth);
    
        NumericValue& minHeight();
        void setMinHeight(NumericValue& aMinHeight);
    
        NumericValue& minWidth();
        void setMinWidth(NumericValue& aMinWidth);
    
        FloatValue& opacity();
        void setOpacity(FloatValue& aOpacity);
    
        ColorValue& outlineColor();
        void setOutlineColor(ColorValue& aOutlineColor);
    
        NumericValue& outlineOffset();
        void setOutlineOffset(NumericValue& aOutlineOffset);
    
        OutlineStyle& outlineStyle();
        void setOutlineStyle(OutlineStyle& aOutlineStyle);
    
        NumericValue& outlineWidth();
        void setOutlineWidth(NumericValue& aOutlineWidth);
    
        OverflowWrap overflowWrap() const;
        void setOverflowWrap(OverflowWrap aOverflowWrap);
    
        Overflow overflowX() const;
        void setOverflowX(Overflow aOverflowX);
    
        Overflow overflowY() const;
        void setOverflowY(Overflow aOverflowY);
    
        NumericValue& paddingBottom();
        void setPaddingBottom(NumericValue& aPaddingBottom);
    
        NumericValue& paddingLeft();
        void setPaddingLeft(NumericValue& aPaddingLeft);
    
        NumericValue& paddingRight();
        void setPaddingRight(NumericValue& aPaddingRight);
    
        NumericValue& paddingTop();
        void setPaddingTop(NumericValue& aPaddingTop);
    
        PageBreakAfter pageBreakAfter() const;
        void setPageBreakAfter(PageBreakAfter aPageBreakAfter);
    
        PageBreakBefore& pageBreakBefore();
        void setPageBreakBefore(PageBreakBefore& aPageBreakBefore);
    
        PageBreakInside pageBreakInside() const;
        void setPageBreakInside(PageBreakInside aPageBreakInside);
    
        Perspective& perspective();
        void setPerspective(Perspective& aPerspective);
    
        PerspectiveOrigin& perspectiveOrigin();
        void setPerspectiveOrigin(PerspectiveOrigin& aPerspectiveOrigin);
    
        Position position() const;
        void setPosition(Position aPosition);
    
        Quotes& quotes();
        void setQuotes(Quotes& aQuotes);
    
        Resize resize() const;
        void setResize(Resize aResize);
    
        NumericValue& right();
        void setRight(NumericValue& aRight);
    
        Size& size();
        void setSize(Size& aSize);
    
        IntegerValue& tabSize();
        void setTabSize(IntegerValue& aTabSize);
    
        TableLayout tableLayout() const;
        void setTableLayout(TableLayout aTableLayout);
    
        TextAlign textAlign() const;
        void setTextAlign(TextAlign aTextAlign);
    
        TextDecoration textDecoration() const;
        void setTextDecoration(TextDecoration aTextDecoration);
    
        NumericValue& textIndent();
        void setTextIndent(NumericValue& aTextIndent);
    
        TextOverflow textOverflow() const;
        void setTextOverflow(TextOverflow aTextOverflow);
    
        TextShadow& textShadow();
        void setTextShadow(TextShadow& aTextShadow);
    
        TextTransform textTransform() const;
        void setTextTransform(TextTransform aTextTransform);
    
        NumericValue& top();
        void setTop(NumericValue& aTop);
    
        TransformOrigin& transformOrigin();
        void setTransformOrigin(TransformOrigin& aTransformOrigin);
    
        TransformStyle transformStyle() const;
        void setTransformStyle(TransformStyle aTransformStyle);
    
        Transform& transform();
        void setTransform(Transform& aTransform);
    
        PeriodValue& transitionDelay();
        void setTransitionDelay(PeriodValue& aTransitionDelay);
    
        PeriodValue& transitionDuration();
        void setTransitionDuration(PeriodValue& aTransitionDuration);
    
        TransitionProperty& transitionProperty();
        void setTransitionProperty(TransitionProperty& aTransitionProperty);
    
        TransitionTimingFunction& transitionTimingFunction();
        void setTransitionTimingFunction(TransitionTimingFunction& aTransitionTimingFunction);
    
        UnicodeBidi unicodeBidi() const;
        void setUnicodeBidi(UnicodeBidi aUnicodeBidi);
    
        VerticalAlign& verticalAlign();
        void setVerticalAlign(VerticalAlign& aVerticalAlign);
    
        Visibility visibility() const;
        void setVisibility(Visibility aVisibility);
    
        WhiteSpace whiteSpace() const;
        void setWhiteSpace(WhiteSpace aWhiteSpace);
    
        IntegerValue& widows();
        void setWidows(IntegerValue& aWidows);
    
        NumericValue& width();
        void setWidth(NumericValue& aWidth);
    
        WordBreak& wordBreak();
        void setWordBreak(WordBreak& aWordBreak);
    
        WordSpacing& wordSpacing();
        void setWordSpacing(WordSpacing& aWordSpacing);
    
        WordWrap wordWrap() const;
        void setWordWrap(WordWrap aWordWrap);
    
        IntegerValue& zIndex();
        void setZIndex(IntegerValue& aZIndex);
    
    
    
    protected:
        AlignContent mAlignContent;
        AlignItems mAlignItems;
        AlignSelf mAlignSelf;
        PeriodValue mAnimationDelay;
        AnimationDirection mAnimationDirection;
        PeriodValue mAnimationDuration;
        AnimationFillMode mAnimationFillMode;
        IntegerValue mAnimationIterationCount;
        StringValue mAnimationName;
        AnimationPlayState mAnimationPlayState;
        AnimationTimingFunction mAnimationTimingFunction;
        BackfaceVisibility mBackfaceVisibility;
        BackgroundAttachment mBackgroundAttachment;
        BackgroundClip mBackgroundClip;
        ColorValue mBackgroundColor;
        BackgroundImage mBackgroundImage;
        BackgroundOriginAxis mBackgroundOriginX;
        BackgroundOriginAxis mBackgroundOriginY;
        BackgroundPositionAxis mBackgroundPositionX;
        BackgroundPositionAxis mBackgroundPositionY;
        BackgroundRepeat mBackgroundRepeat;
        BackgroundSize mBackgroundSize;
        ColorValue mBorderBottomColor;
        BorderRadius mBorderBottomLeftRadius;
        BorderRadius mBorderBottomRightRadius;
        BorderStyle mBorderBottomStyle;
        NumericValue mBorderBottomWidth;
        BorderCollapse mBorderCollapse;
        ColorValue mBorderLeftColor;
        BorderStyle mBorderLeftStyle;
        NumericValue mBorderLeftWidth;
        ColorValue mBorderRightColor;
        BorderStyle mBorderRightStyle;
        NumericValue mBorderRightWidth;
        BorderSpacing mBorderSpacing;
        BorderStyle mBorderTopColor;
        BorderRadius mBorderTopLeftRadius;
        BorderRadius mBorderTopRightRadius;
        BorderStyle mBorderTopStyle;
        NumericValue mBorderTopWidth;
        NumericValue mBottom;
        BoxShadow mBoxShadow;
        BoxSizing mBoxSizing;
        CaptionSide mCaptionSide;
        ColorValue mCaretColor;
        Clear mClear;
        Clip mClip;
        ColorValue mColor;
        IntegerValue mColumnCount;
        columnFill mColumnFill;
        NumericValue mColumnGap;
        ColorValue mColumnRuleColor;
        ColumnRuleStyle mColumnRuleStyle;
        NumericValue mColumnRuleWidth;
        ColumnSpan mColumnSpan;
        IntegerValue mColumnWidth;
        Counter mCounterIncrement;
        Counter mCounterReset;
        Cursor mCursor;
        Direction mDirection;
        Display mDisplay;
        EmptyCells mEmptyCells;
        FlexBasis mFlexBasis;
        FlexDirection mFlexDirection;
        IntegerValue mFlexGrow;
        IntegerValue mFlexShrink;
        FlexWrap mFlexWrap;
        Float mCssFloat;
        StringValue mFontFamily;
        FontFeatureSettings mFontFeatureSettings;
        FontKerning mFontKerning;
        NumericValue mFontSize;
        FontStretch mFontStretch;
        FontStyle mFontStyle;
        FontVariant mFontVariant;
        FontWeight mFontWeight;
        NumericValue mHeight;
        Hyphens mHyphens;
        JustifyContent mJustifyContent;
        JustifyItems mJustifyItems;
        JustifySelf mJustifySelf;
        NumericValue mLeft;
        LetterSpacing mLetterSpacing;
        LineBreak mLineBreak;
        LineHeight mLineHeight;
        ListStyleImage mListStyleImage;
        ListStylePosition mListStylePosition;
        ListStyleType mListStyleType;
        NumericValue mMarginBottom;
        NumericValue mMarginLeft;
        NumericValue mMarginRight;
        NumericValue mMarginTop;
        NumericValue mMaxHeight;
        NumericValue mMaxWidth;
        NumericValue mMinHeight;
        NumericValue mMinWidth;
        FloatValue mOpacity;
        ColorValue mOutlineColor;
        NumericValue mOutlineOffset;
        OutlineStyle mOutlineStyle;
        NumericValue mOutlineWidth;
        OverflowWrap mOverflowWrap;
        Overflow mOverflowX;
        Overflow mOverflowY;
        NumericValue mPaddingBottom;
        NumericValue mPaddingLeft;
        NumericValue mPaddingRight;
        NumericValue mPaddingTop;
        PageBreakAfter mPageBreakAfter;
        PageBreakBefore mPageBreakBefore;
        PageBreakInside mPageBreakInside;
        Perspective mPerspective;
        PerspectiveOrigin mPerspectiveOrigin;
        Position mPosition;
        Quotes mQuotes;
        Resize mResize;
        NumericValue mRight;
        Size mSize;
        IntegerValue mTabSize;
        TableLayout mTableLayout;
        TextAlign mTextAlign;
        TextDecoration mTextDecoration;
        NumericValue mTextIndent;
        TextOverflow mTextOverflow;
        TextShadow mTextShadow;
        TextTransform mTextTransform;
        NumericValue mTop;
        TransformOrigin mTransformOrigin;
        TransformStyle mTransformStyle;
        Transform mTransform;
        PeriodValue mTransitionDelay;
        PeriodValue mTransitionDuration;
        TransitionProperty mTransitionProperty;
        TransitionTimingFunction mTransitionTimingFunction;
        UnicodeBidi mUnicodeBidi;
        VerticalAlign mVerticalAlign;
        Visibility mVisibility;
        WhiteSpace mWhiteSpace;
        IntegerValue mWidows;
        NumericValue mWidth;
        WordBreak mWordBreak;
        WordSpacing mWordSpacing;
        WordWrap mWordWrap;
        IntegerValue mZIndex;
    
    };
    
    class FirstLetterStyleMetrics : public StyleMetrics
    {
    public:
        FirstLetterStyleMetrics(CSSStyleDeclaration* decl);
        FirstLetterStyleMetrics(FirstLetterStyleMetrics& ref);
        FirstLetterStyleMetrics();
    
        BackgroundAttachment& backgroundAttachment();
        void setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment);
    
        BackgroundClip backgroundClip() const;
        void setBackgroundClip(BackgroundClip aBackgroundClip);
    
        ColorValue& backgroundColor();
        void setBackgroundColor(ColorValue& aBackgroundColor);
    
        BackgroundImage& backgroundImage();
        void setBackgroundImage(BackgroundImage& aBackgroundImage);
    
        BackgroundOriginAxis backgroundOriginX() const;
        void setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX);
    
        BackgroundOriginAxis backgroundOriginY() const;
        void setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY);
    
        BackgroundPositionAxis& backgroundPositionX();
        void setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX);
    
        BackgroundPositionAxis& backgroundPositionY();
        void setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY);
    
        BackgroundRepeat& backgroundRepeat();
        void setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat);
    
        BackgroundSize& backgroundSize();
        void setBackgroundSize(BackgroundSize& aBackgroundSize);
    
        ColorValue& borderBottomColor();
        void setBorderBottomColor(ColorValue& aBorderBottomColor);
    
        BorderRadius& borderBottomLeftRadius();
        void setBorderBottomLeftRadius(BorderRadius& aBorderBottomLeftRadius);
    
        BorderRadius& borderBottomRightRadius();
        void setBorderBottomRightRadius(BorderRadius& aBorderBottomRightRadius);
    
        BorderStyle borderBottomStyle() const;
        void setBorderBottomStyle(BorderStyle aBorderBottomStyle);
    
        NumericValue& borderBottomWidth();
        void setBorderBottomWidth(NumericValue& aBorderBottomWidth);
    
        BorderCollapse borderCollapse() const;
        void setBorderCollapse(BorderCollapse aBorderCollapse);
    
        ColorValue& borderLeftColor();
        void setBorderLeftColor(ColorValue& aBorderLeftColor);
    
        BorderStyle borderLeftStyle() const;
        void setBorderLeftStyle(BorderStyle aBorderLeftStyle);
    
        NumericValue& borderLeftWidth();
        void setBorderLeftWidth(NumericValue& aBorderLeftWidth);
    
        ColorValue& borderRightColor();
        void setBorderRightColor(ColorValue& aBorderRightColor);
    
        BorderStyle borderRightStyle() const;
        void setBorderRightStyle(BorderStyle aBorderRightStyle);
    
        NumericValue& borderRightWidth();
        void setBorderRightWidth(NumericValue& aBorderRightWidth);
    
        BorderSpacing& borderSpacing();
        void setBorderSpacing(BorderSpacing& aBorderSpacing);
    
        BorderStyle borderTopColor() const;
        void setBorderTopColor(BorderStyle aBorderTopColor);
    
        BorderRadius& borderTopLeftRadius();
        void setBorderTopLeftRadius(BorderRadius& aBorderTopLeftRadius);
    
        BorderRadius& borderTopRightRadius();
        void setBorderTopRightRadius(BorderRadius& aBorderTopRightRadius);
    
        BorderStyle borderTopStyle() const;
        void setBorderTopStyle(BorderStyle aBorderTopStyle);
    
        NumericValue& borderTopWidth();
        void setBorderTopWidth(NumericValue& aBorderTopWidth);
    
        BoxShadow& boxShadow();
        void setBoxShadow(BoxShadow& aBoxShadow);
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
        Float cssFloat() const;
        void setCssFloat(Float aCssFloat);
    
        StringValue& fontFamily();
        void setFontFamily(StringValue& aFontFamily);
    
        FontFeatureSettings& fontFeatureSettings();
        void setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings);
    
        FontKerning fontKerning() const;
        void setFontKerning(FontKerning aFontKerning);
    
        NumericValue& fontSize();
        void setFontSize(NumericValue& aFontSize);
    
        FontStretch fontStretch() const;
        void setFontStretch(FontStretch aFontStretch);
    
        FontStyle fontStyle() const;
        void setFontStyle(FontStyle aFontStyle);
    
        FontVariant fontVariant() const;
        void setFontVariant(FontVariant aFontVariant);
    
        FontWeight& fontWeight();
        void setFontWeight(FontWeight& aFontWeight);
    
        LetterSpacing& letterSpacing();
        void setLetterSpacing(LetterSpacing& aLetterSpacing);
    
        LineHeight& lineHeight();
        void setLineHeight(LineHeight& aLineHeight);
    
        NumericValue& marginBottom();
        void setMarginBottom(NumericValue& aMarginBottom);
    
        NumericValue& marginLeft();
        void setMarginLeft(NumericValue& aMarginLeft);
    
        NumericValue& marginRight();
        void setMarginRight(NumericValue& aMarginRight);
    
        NumericValue& marginTop();
        void setMarginTop(NumericValue& aMarginTop);
    
        NumericValue& paddingBottom();
        void setPaddingBottom(NumericValue& aPaddingBottom);
    
        NumericValue& paddingLeft();
        void setPaddingLeft(NumericValue& aPaddingLeft);
    
        NumericValue& paddingRight();
        void setPaddingRight(NumericValue& aPaddingRight);
    
        NumericValue& paddingTop();
        void setPaddingTop(NumericValue& aPaddingTop);
    
        TextDecoration textDecoration() const;
        void setTextDecoration(TextDecoration aTextDecoration);
    
        TextShadow& textShadow();
        void setTextShadow(TextShadow& aTextShadow);
    
        TextTransform textTransform() const;
        void setTextTransform(TextTransform aTextTransform);
    
        VerticalAlign& verticalAlign();
        void setVerticalAlign(VerticalAlign& aVerticalAlign);
    
        WordSpacing& wordSpacing();
        void setWordSpacing(WordSpacing& aWordSpacing);
    
    
    
    protected:
        BackgroundAttachment mBackgroundAttachment;
        BackgroundClip mBackgroundClip;
        ColorValue mBackgroundColor;
        BackgroundImage mBackgroundImage;
        BackgroundOriginAxis mBackgroundOriginX;
        BackgroundOriginAxis mBackgroundOriginY;
        BackgroundPositionAxis mBackgroundPositionX;
        BackgroundPositionAxis mBackgroundPositionY;
        BackgroundRepeat mBackgroundRepeat;
        BackgroundSize mBackgroundSize;
        ColorValue mBorderBottomColor;
        BorderRadius mBorderBottomLeftRadius;
        BorderRadius mBorderBottomRightRadius;
        BorderStyle mBorderBottomStyle;
        NumericValue mBorderBottomWidth;
        BorderCollapse mBorderCollapse;
        ColorValue mBorderLeftColor;
        BorderStyle mBorderLeftStyle;
        NumericValue mBorderLeftWidth;
        ColorValue mBorderRightColor;
        BorderStyle mBorderRightStyle;
        NumericValue mBorderRightWidth;
        BorderSpacing mBorderSpacing;
        BorderStyle mBorderTopColor;
        BorderRadius mBorderTopLeftRadius;
        BorderRadius mBorderTopRightRadius;
        BorderStyle mBorderTopStyle;
        NumericValue mBorderTopWidth;
        BoxShadow mBoxShadow;
        ColorValue mColor;
        Float mCssFloat;
        StringValue mFontFamily;
        FontFeatureSettings mFontFeatureSettings;
        FontKerning mFontKerning;
        NumericValue mFontSize;
        FontStretch mFontStretch;
        FontStyle mFontStyle;
        FontVariant mFontVariant;
        FontWeight mFontWeight;
        LetterSpacing mLetterSpacing;
        LineHeight mLineHeight;
        NumericValue mMarginBottom;
        NumericValue mMarginLeft;
        NumericValue mMarginRight;
        NumericValue mMarginTop;
        NumericValue mPaddingBottom;
        NumericValue mPaddingLeft;
        NumericValue mPaddingRight;
        NumericValue mPaddingTop;
        TextDecoration mTextDecoration;
        TextShadow mTextShadow;
        TextTransform mTextTransform;
        VerticalAlign mVerticalAlign;
        WordSpacing mWordSpacing;
    
    };
    
    class FirstLineStyleMetrics : public StyleMetrics
    {
    public:
        FirstLineStyleMetrics(CSSStyleDeclaration* decl);
        FirstLineStyleMetrics(FirstLineStyleMetrics& ref);
        FirstLineStyleMetrics();
    
        BackgroundAttachment& backgroundAttachment();
        void setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment);
    
        BackgroundClip backgroundClip() const;
        void setBackgroundClip(BackgroundClip aBackgroundClip);
    
        ColorValue& backgroundColor();
        void setBackgroundColor(ColorValue& aBackgroundColor);
    
        BackgroundImage& backgroundImage();
        void setBackgroundImage(BackgroundImage& aBackgroundImage);
    
        BackgroundOriginAxis backgroundOriginX() const;
        void setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX);
    
        BackgroundOriginAxis backgroundOriginY() const;
        void setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY);
    
        BackgroundPositionAxis& backgroundPositionX();
        void setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX);
    
        BackgroundPositionAxis& backgroundPositionY();
        void setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY);
    
        BackgroundRepeat& backgroundRepeat();
        void setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat);
    
        BackgroundSize& backgroundSize();
        void setBackgroundSize(BackgroundSize& aBackgroundSize);
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
        StringValue& fontFamily();
        void setFontFamily(StringValue& aFontFamily);
    
        FontFeatureSettings& fontFeatureSettings();
        void setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings);
    
        FontKerning fontKerning() const;
        void setFontKerning(FontKerning aFontKerning);
    
        NumericValue& fontSize();
        void setFontSize(NumericValue& aFontSize);
    
        FontStretch fontStretch() const;
        void setFontStretch(FontStretch aFontStretch);
    
        FontStyle fontStyle() const;
        void setFontStyle(FontStyle aFontStyle);
    
        FontVariant fontVariant() const;
        void setFontVariant(FontVariant aFontVariant);
    
        FontWeight& fontWeight();
        void setFontWeight(FontWeight& aFontWeight);
    
        LetterSpacing& letterSpacing();
        void setLetterSpacing(LetterSpacing& aLetterSpacing);
    
        LineHeight& lineHeight();
        void setLineHeight(LineHeight& aLineHeight);
    
        TextDecoration textDecoration() const;
        void setTextDecoration(TextDecoration aTextDecoration);
    
        TextShadow& textShadow();
        void setTextShadow(TextShadow& aTextShadow);
    
        TextTransform textTransform() const;
        void setTextTransform(TextTransform aTextTransform);
    
        VerticalAlign& verticalAlign();
        void setVerticalAlign(VerticalAlign& aVerticalAlign);
    
        WordSpacing& wordSpacing();
        void setWordSpacing(WordSpacing& aWordSpacing);
    
    
    
    protected:
        BackgroundAttachment mBackgroundAttachment;
        BackgroundClip mBackgroundClip;
        ColorValue mBackgroundColor;
        BackgroundImage mBackgroundImage;
        BackgroundOriginAxis mBackgroundOriginX;
        BackgroundOriginAxis mBackgroundOriginY;
        BackgroundPositionAxis mBackgroundPositionX;
        BackgroundPositionAxis mBackgroundPositionY;
        BackgroundRepeat mBackgroundRepeat;
        BackgroundSize mBackgroundSize;
        ColorValue mColor;
        StringValue mFontFamily;
        FontFeatureSettings mFontFeatureSettings;
        FontKerning mFontKerning;
        NumericValue mFontSize;
        FontStretch mFontStretch;
        FontStyle mFontStyle;
        FontVariant mFontVariant;
        FontWeight mFontWeight;
        LetterSpacing mLetterSpacing;
        LineHeight mLineHeight;
        TextDecoration mTextDecoration;
        TextShadow mTextShadow;
        TextTransform mTextTransform;
        VerticalAlign mVerticalAlign;
        WordSpacing mWordSpacing;
    
    };
    
    class SelectionStyleMetrics : public StyleMetrics
    {
    public:
        SelectionStyleMetrics(CSSStyleDeclaration* decl);
        SelectionStyleMetrics(SelectionStyleMetrics& ref);
        SelectionStyleMetrics();
    
        ColorValue& backgroundColor();
        void setBackgroundColor(ColorValue& aBackgroundColor);
    
        ColorValue& caretColor();
        void setCaretColor(ColorValue& aCaretColor);
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
        Cursor& cursor();
        void setCursor(Cursor& aCursor);
    
        ColorValue& outlineColor();
        void setOutlineColor(ColorValue& aOutlineColor);
    
        NumericValue& outlineOffset();
        void setOutlineOffset(NumericValue& aOutlineOffset);
    
        OutlineStyle& outlineStyle();
        void setOutlineStyle(OutlineStyle& aOutlineStyle);
    
        NumericValue& outlineWidth();
        void setOutlineWidth(NumericValue& aOutlineWidth);
    
        TextDecoration textDecoration() const;
        void setTextDecoration(TextDecoration aTextDecoration);
    
        TextShadow& textShadow();
        void setTextShadow(TextShadow& aTextShadow);
    
    
    
    protected:
        ColorValue mBackgroundColor;
        ColorValue mCaretColor;
        ColorValue mColor;
        Cursor mCursor;
        ColorValue mOutlineColor;
        NumericValue mOutlineOffset;
        OutlineStyle mOutlineStyle;
        NumericValue mOutlineWidth;
        TextDecoration mTextDecoration;
        TextShadow mTextShadow;
    
    };
    
    class SVGElementStyleMetrics : public StyleMetrics
    {
    public:
        SVGElementStyleMetrics(CSSStyleDeclaration* decl);
        SVGElementStyleMetrics(SVGElementStyleMetrics& ref);
        SVGElementStyleMetrics();
    
        ColorValue& color();
        void setColor(ColorValue& aColor);
    
        Cursor& cursor();
        void setCursor(Cursor& aCursor);
    
        Direction direction() const;
        void setDirection(Direction aDirection);
    
        StringValue& fontFamily();
        void setFontFamily(StringValue& aFontFamily);
    
        FontFeatureSettings& fontFeatureSettings();
        void setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings);
    
        FontKerning fontKerning() const;
        void setFontKerning(FontKerning aFontKerning);
    
        NumericValue& fontSize();
        void setFontSize(NumericValue& aFontSize);
    
        FontStretch fontStretch() const;
        void setFontStretch(FontStretch aFontStretch);
    
        FontStyle fontStyle() const;
        void setFontStyle(FontStyle aFontStyle);
    
        FontVariant fontVariant() const;
        void setFontVariant(FontVariant aFontVariant);
    
        FontWeight& fontWeight();
        void setFontWeight(FontWeight& aFontWeight);
    
        LetterSpacing& letterSpacing();
        void setLetterSpacing(LetterSpacing& aLetterSpacing);
    
        LineHeight& lineHeight();
        void setLineHeight(LineHeight& aLineHeight);
    
        FloatValue& opacity();
        void setOpacity(FloatValue& aOpacity);
    
        TextDecoration textDecoration() const;
        void setTextDecoration(TextDecoration aTextDecoration);
    
        TextOverflow textOverflow() const;
        void setTextOverflow(TextOverflow aTextOverflow);
    
        TextShadow& textShadow();
        void setTextShadow(TextShadow& aTextShadow);
    
        TextTransform textTransform() const;
        void setTextTransform(TextTransform aTextTransform);
    
        NumericValue& top();
        void setTop(NumericValue& aTop);
    
        TransformOrigin& transformOrigin();
        void setTransformOrigin(TransformOrigin& aTransformOrigin);
    
        Transform& transform();
        void setTransform(Transform& aTransform);
    
        UnicodeBidi unicodeBidi() const;
        void setUnicodeBidi(UnicodeBidi aUnicodeBidi);
    
        VerticalAlign& verticalAlign();
        void setVerticalAlign(VerticalAlign& aVerticalAlign);
    
        Visibility visibility() const;
        void setVisibility(Visibility aVisibility);
    
        WhiteSpace whiteSpace() const;
        void setWhiteSpace(WhiteSpace aWhiteSpace);
    
        WordSpacing& wordSpacing();
        void setWordSpacing(WordSpacing& aWordSpacing);
    
        TextAnchor textAnchor() const;
        void setTextAnchor(TextAnchor aTextAnchor);
    
        NumericValue& cx();
        void setCx(NumericValue& aCx);
    
        NumericValue& cy();
        void setCy(NumericValue& aCy);
    
        NumericValue& height();
        void setHeight(NumericValue& aHeight);
    
        NumericValue& width();
        void setWidth(NumericValue& aWidth);
    
        NumericValue& x();
        void setX(NumericValue& aX);
    
        NumericValue& y();
        void setY(NumericValue& aY);
    
        NumericValue& r();
        void setR(NumericValue& aR);
    
        RadiusAxis& rx();
        void setRx(RadiusAxis& aRx);
    
        RadiusAxis& ry();
        void setRy(RadiusAxis& aRy);
    
        PathData& d();
        void setD(PathData& aD);
    
        ColorValue& fill();
        void setFill(ColorValue& aFill);
    
        FloatValue& fillOpacity();
        void setFillOpacity(FloatValue& aFillOpacity);
    
        FillRule fillRule() const;
        void setFillRule(FillRule aFillRule);
    
        RadiusAxis& rx();
        void setRx(RadiusAxis& aRx);
    
        RadiusAxis& ry();
        void setRy(RadiusAxis& aRy);
    
        Marker& markerStart();
        void setMarkerStart(Marker& aMarkerStart);
    
        Marker& markerMid();
        void setMarkerMid(Marker& aMarkerMid);
    
        Marker& markerEnd();
        void setMarkerEnd(Marker& aMarkerEnd);
    
        ColorValue& stroke();
        void setStroke(ColorValue& aStroke);
    
        Dasharray& strokeDasharray();
        void setStrokeDasharray(Dasharray& aStrokeDasharray);
    
        NumericValue& strokeDashoffset();
        void setStrokeDashoffset(NumericValue& aStrokeDashoffset);
    
        ColorValue& strokeLinecap();
        void setStrokeLinecap(ColorValue& aStrokeLinecap);
    
        ColorValue& strokeLinejoin();
        void setStrokeLinejoin(ColorValue& aStrokeLinejoin);
    
        IntegerValue& strokeMitterlimit();
        void setStrokeMitterlimit(IntegerValue& aStrokeMitterlimit);
    
        FloatValue& strokeOpacity();
        void setStrokeOpacity(FloatValue& aStrokeOpacity);
    
        IntegerValue& strokeWidth();
        void setStrokeWidth(IntegerValue& aStrokeWidth);
    
    
    
    protected:
        ColorValue mColor;
        Cursor mCursor;
        Direction mDirection;
        StringValue mFontFamily;
        FontFeatureSettings mFontFeatureSettings;
        FontKerning mFontKerning;
        NumericValue mFontSize;
        FontStretch mFontStretch;
        FontStyle mFontStyle;
        FontVariant mFontVariant;
        FontWeight mFontWeight;
        LetterSpacing mLetterSpacing;
        LineHeight mLineHeight;
        FloatValue mOpacity;
        TextDecoration mTextDecoration;
        TextOverflow mTextOverflow;
        TextShadow mTextShadow;
        TextTransform mTextTransform;
        NumericValue mTop;
        TransformOrigin mTransformOrigin;
        Transform mTransform;
        UnicodeBidi mUnicodeBidi;
        VerticalAlign mVerticalAlign;
        Visibility mVisibility;
        WhiteSpace mWhiteSpace;
        WordSpacing mWordSpacing;
        TextAnchor mTextAnchor;
        NumericValue mCx;
        NumericValue mCy;
        NumericValue mHeight;
        NumericValue mWidth;
        NumericValue mX;
        NumericValue mY;
        NumericValue mR;
        RadiusAxis mRx;
        RadiusAxis mRy;
        PathData mD;
        ColorValue mFill;
        FloatValue mFillOpacity;
        FillRule mFillRule;
        RadiusAxis mRx;
        RadiusAxis mRy;
        Marker mMarkerStart;
        Marker mMarkerMid;
        Marker mMarkerEnd;
        ColorValue mStroke;
        Dasharray mStrokeDasharray;
        NumericValue mStrokeDashoffset;
        ColorValue mStrokeLinecap;
        ColorValue mStrokeLinejoin;
        IntegerValue mStrokeMitterlimit;
        FloatValue mStrokeOpacity;
        IntegerValue mStrokeWidth;
    
    };
    
    
} // namespace Newtoo