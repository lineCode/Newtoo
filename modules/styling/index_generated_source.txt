#include "StyleMetrics.h"
#include "NumericValue.h"
#include "PeriodValue.h"
#include "ColorValue.h"
#include "IntegerValue.h"
#include "FloatValue.h"
#include "StringValue.h"
#include "CubicBezierFunction.h"
#include "AnimationTimingFunction.h"
#include "BackgroundImage.h"
#include "BackgroundPositionAxis.h"
#include "BackgroundRepeatAxis.h"
#include "BackgroundRepeat.h"
#include "BackgroundSizeAxis.h"
#include "BackgroundSize.h"
#include "BorderRadius.h"
#include "Shadow.h"
#include "ShadowList.h"
#include "BoxShadow.h"
#include "Rect.h"
#include "Clip.h"
#include "Counter.h"
#include "Cursor.h"
#include "FlexBasis.h"
#include "OpenTypeFontOption.h"
#include "OpenTypeFontOptionList.h"
#include "FontFeatureSettings.h"
#include "FontWeight.h"
#include "LetterSpacing.h"
#include "Perspective.h"
#include "PerspectiveOriginAxis.h"
#include "PerspectiveOrigin.h"
#include "Quotes.h"
#include "SizeOf.h"
#include "Size.h"
#include "TransformOrigin.h"
#include "TransformModifier.h"
#include "TransformMatrix.h"
#include "TransformRotate.h"
#include "TransformScale.h"
#include "TransformScaleX.h"
#include "TransformScaleY.h"
#include "TransformSkewX.h"
#include "TransformSkewY.h"
#include "TransformTranslate.h"
#include "TransformTranslateX.h"
#include "TransformTranslateY.h"
#include "TransformList.h"
#include "Transform.h"
#include "PropertyList.h"
#include "TransitionProperty.h"
#include "VerticalAlign.h"
#include "RadiusAxis.h"
#include "PathData.h"
#include "Dasharray.h"
#include "ElementStyleMetrics.h"
#include "FirstLetterStyleMetrics.h"
#include "FirstLineStyleMetrics.h"
#include "SelectionStyleMetrics.h"
#include "SVGElementStyleMetrics.h"

namespace Newtoo
{
    StyleMetrics::StyleMetrics(StyleMetrics& ref)
    {}
    
    StyleMetrics::StyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    StyleMetrics::StyleMetrics()
    {
    
    }
    
    unsigned long StyleMetrics::length()
    {
    
    }
    
    DOMString StyleMetrics::item(unsigned long index)
    {
    
    }
    
    DOMString StyleMetrics::getPropertyValue(DOMString propertyID)
    {
    
    }
    
    void StyleMetrics::setPropertyValue(DOMString propertyID, DOMString value)
    {
    
    }
    
    CSSOMString StyleMetrics::keywordToString(short value)
    {
    
    }
    
    short StyleMetrics::keywordFromString(CSSOMString str)
    {
    
    }
    
    bool StyleMetrics::isKeyword(CSSOMString str)
    {
    
    }
    
    NumericValue::NumericValue(NumericValue& ref) : mValue(ref.mValue), mUnit(ref.mUnit)
    {}
    
    NumericValue::NumericValue(double aValue, Unit aUnit)
    {
    
    }
    
    NumericValue::NumericValue()
    {
    
    }
    
    double NumericValue::value() const
    {
        return mValue;
    }
    
    void NumericValue::setValue(double aValue)
    {
        mValue = aValue;
    }
    
    Unit NumericValue::unit() const
    {
        return mUnit;
    }
    
    void NumericValue::setUnit(Unit aUnit)
    {
        mUnit = aUnit;
    }
    
    double NumericValue::toPx(double relativeValue)
    {
    
    }
    
    CSSOMString NumericValue::toString()
    {
    
    }
    
    NumericValue NumericValue::fromString(CSSOMString str)
    {
    
    }
    
    PeriodValue::PeriodValue(PeriodValue& ref) : mNumber(ref.mNumber), mUnit(ref.mUnit)
    {}
    
    PeriodValue::PeriodValue(unsigned long aNumber, TimeUnit aUnit)
    {
    
    }
    
    PeriodValue::PeriodValue()
    {
    
    }
    
    double PeriodValue::number() const
    {
        return mNumber;
    }
    
    void PeriodValue::setNumber(double aNumber)
    {
        mNumber = aNumber;
    }
    
    TimeUnit PeriodValue::unit() const
    {
        return mUnit;
    }
    
    void PeriodValue::setUnit(TimeUnit aUnit)
    {
        mUnit = aUnit;
    }
    
    unsigned long PeriodValue::toMilliseconds()
    {
    
    }
    
    CSSOMString PeriodValue::toString()
    {
    
    }
    
    PeriodValue PeriodValue::fromString(CSSOMString str)
    {
    
    }
    
    ColorValue::ColorValue(ColorValue& ref) : mKeyword(ref.mKeyword), mColor(ref.mColor), mAlpha(ref.mAlpha)
    {}
    
    ColorValue::ColorValue(ColorKeyword aKeyword)
    {
    
    }
    
    ColorValue::ColorValue(CSSOMString hex)
    {
    
    }
    
    ColorValue::ColorValue(unsigned char aRed, unsigned char aGreen, unsigned char aBlue)
    {
    
    }
    
    ColorValue::ColorValue(unsigned char aRed, unsigned char aGreen, unsigned char aBlue, unsigned char aAlpha)
    {
    
    }
    
    ColorValue::ColorValue()
    {
    
    }
    
    ColorKeyword ColorValue::keyword() const
    {
        return mKeyword;
    }
    
    void ColorValue::setKeyword(ColorKeyword aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    long ColorValue::color() const
    {
        return mColor;
    }
    
    void ColorValue::setColor(long aColor)
    {
        mColor = aColor;
    }
    
    unsigned char ColorValue::red()
    {
    
    }
    
    void ColorValue::setRed(unsigned char aRed)
    {
    
    }
    
    unsigned char ColorValue::green()
    {
    
    }
    
    void ColorValue::setGreen(unsigned char aGreen)
    {
    
    }
    
    unsigned char ColorValue::blue()
    {
    
    }
    
    void ColorValue::setBlue(unsigned char aBlue)
    {
    
    }
    
    unsigned char ColorValue::alpha() const
    {
        return mAlpha;
    }
    
    void ColorValue::setAlpha(unsigned char aAlpha)
    {
        mAlpha = aAlpha;
    }
    
    CSSOMString ColorValue::toString()
    {
    
    }
    
    ColorValue ColorValue::fromString(CSSOMString str)
    {
    
    }
    
    IntegerValue::IntegerValue(IntegerValue& ref) : mKeyword(ref.mKeyword), mValue(ref.mValue)
    {}
    
    IntegerValue::IntegerValue(short aKeyword )
    {
    
    }
    
    IntegerValue::IntegerValue()
    {
    
    }
    
    short IntegerValue::keyword() const
    {
        return mKeyword;
    }
    
    void IntegerValue::setKeyword(short aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    long IntegerValue::value() const
    {
        return mValue;
    }
    
    void IntegerValue::setValue(long aValue)
    {
        mValue = aValue;
    }
    
    CSSOMString IntegerValue::toString()
    {
    
    }
    
    IntegerValue IntegerValue::fromString(CSSOMString str)
    {
    
    }
    
    FloatValue::FloatValue(FloatValue& ref) : mKeyword(ref.mKeyword), mValue(ref.mValue)
    {}
    
    FloatValue::FloatValue(short aKeyword )
    {
    
    }
    
    FloatValue::FloatValue()
    {
    
    }
    
    short FloatValue::keyword() const
    {
        return mKeyword;
    }
    
    void FloatValue::setKeyword(short aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    double FloatValue::value() const
    {
        return mValue;
    }
    
    void FloatValue::setValue(double aValue)
    {
        mValue = aValue;
    }
    
    CSSOMString FloatValue::toString()
    {
    
    }
    
    IntegerValue FloatValue::fromString(CSSOMString str)
    {
    
    }
    
    StringValue::StringValue(StringValue& ref) : mKeyword(ref.mKeyword), mValue(ref.mValue)
    {}
    
    StringValue::StringValue(short aKeyword )
    {
    
    }
    
    StringValue::StringValue()
    {
    
    }
    
    short StringValue::keyword() const
    {
        return mKeyword;
    }
    
    void StringValue::setKeyword(short aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    CSSOMString StringValue::value() const
    {
        return mValue;
    }
    
    void StringValue::setValue(CSSOMString aValue)
    {
        mValue = aValue;
    }
    
    CSSOMString StringValue::toString()
    {
    
    }
    
    StringValue StringValue::fromString(CSSOMString str)
    {
    
    }
    
    CubicBezierFunction::CubicBezierFunction(CubicBezierFunction& ref)
    {}
    
    CubicBezierFunction::CubicBezierFunction()
    {
    
    }
    
    double CubicBezierFunction::item(unsigned long index)
    {
    
    }
    
    unsigned long CubicBezierFunction::length()
    {
    
    }
    
    void CubicBezierFunction::add(double number)
    {
    
    }
    
    void CubicBezierFunction::remove(unsigned long index)
    {
    
    }
    
    CSSOMString CubicBezierFunction::toString()
    {
    
    }
    
    AnimationTimingFunction::AnimationTimingFunction(AnimationTimingFunction& ref) : mType(ref.mType), mCubicBezierFunction(ref.mCubicBezierFunction), mSteps(ref.mSteps)
    {}
    
    AnimationTimingFunction::AnimationTimingFunction(AnimationTimingFunctionType keyword)
    {
    
    }
    
    AnimationTimingFunction::AnimationTimingFunction(CubicBezierFunction aCubicBezierFunction)
    {
    
    }
    
    AnimationTimingFunction::AnimationTimingFunction(unsigned long aSteps)
    {
    
    }
    
    AnimationTimingFunction::AnimationTimingFunction()
    {
    
    }
    
    AnimationTimingFunctionType AnimationTimingFunction::type() const
    {
        return mType;
    }
    
    void AnimationTimingFunction::setType(AnimationTimingFunctionType aType)
    {
        mType = aType;
    }
    
    CubicBezierFunction& AnimationTimingFunction::cubicBezierFunction()
    {
        return mCubicBezierFunction;
    }
    
    unsigned long AnimationTimingFunction::steps() const
    {
        return mSteps;
    }
    
    void AnimationTimingFunction::setSteps(unsigned long aSteps)
    {
        mSteps = aSteps;
    }
    
    CSSOMString AnimationTimingFunction::toString()
    {
    
    }
    
    AnimationTimingFunction AnimationTimingFunction::fromString(CSSOMString str)
    {
    
    }
    
    BackgroundImage::BackgroundImage(BackgroundImage& ref) : mType(ref.mType), mUrl(ref.mUrl)
    {}
    
    BackgroundImage::BackgroundImage(USVString aUrl])
    {
    
    }
    
    BackgroundImage::BackgroundImage()
    {
    
    }
    
    BackgroundImageType BackgroundImage::type() const
    {
        return mType;
    }
    
    void BackgroundImage::setType(BackgroundImageType aType)
    {
        mType = aType;
    }
    
    USVString BackgroundImage::url() const
    {
        return mUrl;
    }
    
    void BackgroundImage::setUrl(USVString aUrl)
    {
        mUrl = aUrl;
    }
    
    CSSOMString BackgroundImage::toString()
    {
    
    }
    
    BackgroundImage BackgroundImage::fromString(CSSOMString str)
    {
    
    }
    
    BackgroundPositionAxis::BackgroundPositionAxis(BackgroundPositionAxis& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    BackgroundPositionAxis::BackgroundPositionAxis(BackgroundPositionType keyword)
    {
    
    }
    
    BackgroundPositionAxis::BackgroundPositionAxis(NumericValue aNumber)
    {
    
    }
    
    BackgroundPositionAxis::BackgroundPositionAxis()
    {
    
    }
    
    BackgroundPositionType BackgroundPositionAxis::type() const
    {
        return mType;
    }
    
    void BackgroundPositionAxis::setType(BackgroundPositionType aType)
    {
        mType = aType;
    }
    
    NumericValue& BackgroundPositionAxis::number()
    {
        return mNumber;
    }
    
    void BackgroundPositionAxis::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString BackgroundPositionAxis::toString()
    {
    
    }
    
    BackgroundPositionAxis BackgroundPositionAxis::fromString(CSSOMString str)
    {
    
    }
    
    BackgroundRepeatAxis::BackgroundRepeatAxis(BackgroundRepeatAxis& ref) : mType(ref.mType), mAmount(ref.mAmount)
    {}
    
    BackgroundRepeatAxis::BackgroundRepeatAxis(BackgroundRepeatAxisType keyword)
    {
    
    }
    
    BackgroundRepeatAxis::BackgroundRepeatAxis(unsigned long aAmount)
    {
    
    }
    
    BackgroundRepeatAxis::BackgroundRepeatAxis()
    {
    
    }
    
    BackgroundRepeatAxisType BackgroundRepeatAxis::type() const
    {
        return mType;
    }
    
    void BackgroundRepeatAxis::setType(BackgroundRepeatAxisType aType)
    {
        mType = aType;
    }
    
    unsigned long BackgroundRepeatAxis::amount() const
    {
        return mAmount;
    }
    
    void BackgroundRepeatAxis::setAmount(unsigned long aAmount)
    {
        mAmount = aAmount;
    }
    
    CSSOMString BackgroundRepeatAxis::toString()
    {
    
    }
    
    BackgroundRepeat::BackgroundRepeat(BackgroundRepeat& ref) : mKeyword(ref.mKeyword), mX(ref.mX), mY(ref.mY)
    {}
    
    BackgroundRepeat::BackgroundRepeat(short aKeyword)
    {
    
    }
    
    BackgroundRepeat::BackgroundRepeat(BackgroundRepeatAxis aX)
    {
    
    }
    
    BackgroundRepeat::BackgroundRepeat(BackgroundRepeatAxis aX, BackgroundRepeatAxis aY)
    {
    
    }
    
    BackgroundRepeat::BackgroundRepeat()
    {
    
    }
    
    short BackgroundRepeat::keyword() const
    {
        return mKeyword;
    }
    
    void BackgroundRepeat::setKeyword(short aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    BackgroundRepeatAxis& BackgroundRepeat::x()
    {
        return mX;
    }
    
    void BackgroundRepeat::setX(BackgroundRepeatAxis& aX)
    {
        mX = aX;
    }
    
    BackgroundRepeatAxis& BackgroundRepeat::y()
    {
        return mY;
    }
    
    void BackgroundRepeat::setY(BackgroundRepeatAxis& aY)
    {
        mY = aY;
    }
    
    CSSOMString BackgroundRepeat::toString()
    {
    
    }
    
    BackgroundRepeat BackgroundRepeat::fromString(CSSOMString str)
    {
    
    }
    
    BackgroundSizeAxis::BackgroundSizeAxis(BackgroundSizeAxis& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    BackgroundSizeAxis::BackgroundSizeAxis(BackgroundSizeType keyword)
    {
    
    }
    
    BackgroundSizeAxis::BackgroundSizeAxis(NumericValue aNumber)
    {
    
    }
    
    BackgroundSizeAxis::BackgroundSizeAxis()
    {
    
    }
    
    BackgroundSizeType BackgroundSizeAxis::type() const
    {
        return mType;
    }
    
    void BackgroundSizeAxis::setType(BackgroundSizeType aType)
    {
        mType = aType;
    }
    
    NumericValue& BackgroundSizeAxis::number()
    {
        return mNumber;
    }
    
    void BackgroundSizeAxis::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString BackgroundSizeAxis::toString()
    {
    
    }
    
    BackgroundSize::BackgroundSize(BackgroundSize& ref) : mAKeyword(ref.mAKeyword), mX(ref.mX), mY(ref.mY)
    {}
    
    BackgroundSize::BackgroundSize(short keyword)
    {
    
    }
    
    BackgroundSize::BackgroundSize(BackgroundSizeAxis aX)
    {
    
    }
    
    BackgroundSize::BackgroundSize(BackgroundSizeAxis aX, BackgroundSizeAxis aY)
    {
    
    }
    
    BackgroundSize::BackgroundSize()
    {
    
    }
    
    short BackgroundSize::aKeyword() const
    {
        return mAKeyword;
    }
    
    void BackgroundSize::setAKeyword(short aAKeyword)
    {
        mAKeyword = aAKeyword;
    }
    
    BackgroundSizeAxis& BackgroundSize::x()
    {
        return mX;
    }
    
    void BackgroundSize::setX(BackgroundSizeAxis& aX)
    {
        mX = aX;
    }
    
    BackgroundSizeAxis& BackgroundSize::y()
    {
        return mY;
    }
    
    void BackgroundSize::setY(BackgroundSizeAxis& aY)
    {
        mY = aY;
    }
    
    CSSOMString BackgroundSize::toString()
    {
    
    }
    
    BackgroundSize BackgroundSize::fromString(CSSOMString str)
    {
    
    }
    
    BorderRadius::BorderRadius(BorderRadius& ref) : mKeyword(ref.mKeyword), mVertical(ref.mVertical), mHorizontal(ref.mHorizontal)
    {}
    
    BorderRadius::BorderRadius(short aKeyword)
    {
    
    }
    
    BorderRadius::BorderRadius(NumericValue aVertical)
    {
    
    }
    
    BorderRadius::BorderRadius(NumericValue aVertical, NumericValue aHorizontal)
    {
    
    }
    
    BorderRadius::BorderRadius()
    {
    
    }
    
    short BorderRadius::keyword() const
    {
        return mKeyword;
    }
    
    void BorderRadius::setKeyword(short aKeyword)
    {
        mKeyword = aKeyword;
    }
    
    NumericValue& BorderRadius::vertical()
    {
        return mVertical;
    }
    
    void BorderRadius::setVertical(NumericValue& aVertical)
    {
        mVertical = aVertical;
    }
    
    NumericValue& BorderRadius::horizontal()
    {
        return mHorizontal;
    }
    
    void BorderRadius::setHorizontal(NumericValue& aHorizontal)
    {
        mHorizontal = aHorizontal;
    }
    
    CSSOMString BorderRadius::toString()
    {
    
    }
    
    BorderRadius BorderRadius::fromString(CSSOMString str)
    {
    
    }
    
    Shadow::Shadow(Shadow& ref) : mInset(ref.mInset), mOffsetX(ref.mOffsetX), mOffsetY(ref.mOffsetY), mBlur(ref.mBlur), mStretch(ref.mStretch), mColor(ref.mColor)
    {}
    
    Shadow::Shadow(bool aInset, long aOffsetX, long aOffsetY, unsigned long aBlur, long aStretch, ColorValue aColor)
    {
    
    }
    
    Shadow::Shadow()
    {
    
    }
    
    bool& Shadow::inset()
    {
        return mInset;
    }
    
    void Shadow::setInset(bool& aInset)
    {
        mInset = aInset;
    }
    
    long Shadow::offsetX() const
    {
        return mOffsetX;
    }
    
    void Shadow::setOffsetX(long aOffsetX)
    {
        mOffsetX = aOffsetX;
    }
    
    long Shadow::offsetY() const
    {
        return mOffsetY;
    }
    
    void Shadow::setOffsetY(long aOffsetY)
    {
        mOffsetY = aOffsetY;
    }
    
    unsigned long Shadow::blur() const
    {
        return mBlur;
    }
    
    void Shadow::setBlur(unsigned long aBlur)
    {
        mBlur = aBlur;
    }
    
    long Shadow::stretch() const
    {
        return mStretch;
    }
    
    void Shadow::setStretch(long aStretch)
    {
        mStretch = aStretch;
    }
    
    ColorValue& Shadow::color()
    {
        return mColor;
    }
    
    void Shadow::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    ShadowList::ShadowList(ShadowList& ref)
    {}
    
    ShadowList::ShadowList()
    {
    
    }
    
    Shadow* ShadowList::item(unsigned long index)
    {
    
    }
    
    unsigned long ShadowList::length()
    {
    
    }
    
    void ShadowList::add(Shadow shadow)
    {
    
    }
    
    void ShadowList::remove(unsigned long index)
    {
    
    }
    
    BoxShadow::BoxShadow(BoxShadow& ref) : mType(ref.mType), mShadows(ref.mShadows)
    {}
    
    BoxShadow::BoxShadow()
    {
    
    }
    
    BoxShadowType BoxShadow::type() const
    {
        return mType;
    }
    
    void BoxShadow::setType(BoxShadowType aType)
    {
        mType = aType;
    }
    
    ShadowList& BoxShadow::shadows()
    {
        return mShadows;
    }
    
    CSSOMString BoxShadow::toString()
    {
    
    }
    
    BoxShadow BoxShadow::fromString(CSSOMString str)
    {
    
    }
    
    Rect::Rect(Rect& ref) : mY1(ref.mY1), mX2(ref.mX2), mY2(ref.mY2), mX1(ref.mX1)
    {}
    
    Rect::Rect(long aY1, long aX2, long aY2, long aX1)
    {
    
    }
    
    Rect::Rect()
    {
    
    }
    
    long Rect::y1() const
    {
        return mY1;
    }
    
    void Rect::setY1(long aY1)
    {
        mY1 = aY1;
    }
    
    long Rect::x2() const
    {
        return mX2;
    }
    
    void Rect::setX2(long aX2)
    {
        mX2 = aX2;
    }
    
    long Rect::y2() const
    {
        return mY2;
    }
    
    void Rect::setY2(long aY2)
    {
        mY2 = aY2;
    }
    
    long Rect::x1() const
    {
        return mX1;
    }
    
    void Rect::setX1(long aX1)
    {
        mX1 = aX1;
    }
    
    Clip::Clip(Clip& ref) : mType(ref.mType), mRect(ref.mRect)
    {}
    
    Clip::Clip(Rect aRect)
    {
    
    }
    
    Clip::Clip()
    {
    
    }
    
    ClipType Clip::type() const
    {
        return mType;
    }
    
    void Clip::setType(ClipType aType)
    {
        mType = aType;
    }
    
    Rect& Clip::rect()
    {
        return mRect;
    }
    
    void Clip::setRect(Rect& aRect)
    {
        mRect = aRect;
    }
    
    CSSOMString Clip::toString()
    {
    
    }
    
    Clip Clip::fromString(CSSOMString str)
    {
    
    }
    
    Counter::Counter(Counter& ref) : mType(ref.mType), mIdentifer(ref.mIdentifer)
    {}
    
    Counter::Counter(CSSOMString identifer)
    {
    
    }
    
    Counter::Counter()
    {
    
    }
    
    CounterType Counter::type() const
    {
        return mType;
    }
    
    void Counter::setType(CounterType aType)
    {
        mType = aType;
    }
    
    CSSOMString Counter::identifer() const
    {
        return mIdentifer;
    }
    
    void Counter::setIdentifer(CSSOMString aIdentifer)
    {
        mIdentifer = aIdentifer;
    }
    
    CSSOMString Counter::toString()
    {
    
    }
    
    Counter Counter::fromString(CSSOMString str)
    {
    
    }
    
    Cursor::Cursor(Cursor& ref) : mVariant(ref.mVariant), mUrl(ref.mUrl)
    {}
    
    Cursor::Cursor(CursorVariant aVariant)
    {
    
    }
    
    Cursor::Cursor(CSSOMString aUrl)
    {
    
    }
    
    Cursor::Cursor()
    {
    
    }
    
    CursorVariant Cursor::variant() const
    {
        return mVariant;
    }
    
    void Cursor::setVariant(CursorVariant aVariant)
    {
        mVariant = aVariant;
    }
    
    CSSOMString Cursor::url() const
    {
        return mUrl;
    }
    
    void Cursor::setUrl(CSSOMString aUrl)
    {
        mUrl = aUrl;
    }
    
    CSSOMString Cursor::toString()
    {
    
    }
    
    Cursor Cursor::fromString(CSSOMString str)
    {
    
    }
    
    FlexBasis::FlexBasis(FlexBasis& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    FlexBasis::FlexBasis(FlexBasisType keyword)
    {
    
    }
    
    FlexBasis::FlexBasis(NumericValue aNumber)
    {
    
    }
    
    FlexBasis::FlexBasis()
    {
    
    }
    
    FlexBasisType FlexBasis::type() const
    {
        return mType;
    }
    
    void FlexBasis::setType(FlexBasisType aType)
    {
        mType = aType;
    }
    
    NumericValue& FlexBasis::number()
    {
        return mNumber;
    }
    
    void FlexBasis::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString FlexBasis::toString()
    {
    
    }
    
    FlexBasis FlexBasis::fromString(CSSOMString str)
    {
    
    }
    
    OpenTypeFontOption::OpenTypeFontOption(OpenTypeFontOption& ref) : mOptionID(ref.mOptionID), mKeywordValue(ref.mKeywordValue), mValue(ref.mValue)
    {}
    
    OpenTypeFontOption::OpenTypeFontOption(CSSOMString id, FontOptionKeywordValue keyword)
    {
    
    }
    
    OpenTypeFontOption::OpenTypeFontOption(CSSOMString id, long num)
    {
    
    }
    
    OpenTypeFontOption::OpenTypeFontOption()
    {
    
    }
    
    CSSOMString OpenTypeFontOption::optionID() const
    {
        return mOptionID;
    }
    
    void OpenTypeFontOption::setOptionID(CSSOMString aOptionID)
    {
        mOptionID = aOptionID;
    }
    
    FontOptionKeywordValue OpenTypeFontOption::keywordValue() const
    {
        return mKeywordValue;
    }
    
    void OpenTypeFontOption::setKeywordValue(FontOptionKeywordValue aKeywordValue)
    {
        mKeywordValue = aKeywordValue;
    }
    
    long OpenTypeFontOption::value() const
    {
        return mValue;
    }
    
    void OpenTypeFontOption::setValue(long aValue)
    {
        mValue = aValue;
    }
    
    OpenTypeFontOptionList::OpenTypeFontOptionList(OpenTypeFontOptionList& ref)
    {}
    
    OpenTypeFontOptionList::OpenTypeFontOptionList()
    {
    
    }
    
    OpenTypeFontOption* OpenTypeFontOptionList::item(unsigned long index)
    {
    
    }
    
    unsigned long OpenTypeFontOptionList::length()
    {
    
    }
    
    void OpenTypeFontOptionList::add(OpenTypeFontOption option)
    {
    
    }
    
    void OpenTypeFontOptionList::remove(unsigned long index)
    {
    
    }
    
    FontFeatureSettings::FontFeatureSettings(FontFeatureSettings& ref) : mType(ref.mType), mOptions(ref.mOptions)
    {}
    
    FontFeatureSettings::FontFeatureSettings(FontFeatureSettingsType keyword)
    {
    
    }
    
    FontFeatureSettings::FontFeatureSettings()
    {
    
    }
    
    FontFeatureSettingsType FontFeatureSettings::type() const
    {
        return mType;
    }
    
    OpenTypeFontOptionList& FontFeatureSettings::options()
    {
        return mOptions;
    }
    
    CSSOMString FontFeatureSettings::toString()
    {
    
    }
    
    FontFeatureSettings FontFeatureSettings::fromString(CSSOMString str)
    {
    
    }
    
    FontWeight::FontWeight(FontWeight& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    FontWeight::FontWeight(FontWeightType keyword)
    {
    
    }
    
    FontWeight::FontWeight(unsigned long aNumber)
    {
    
    }
    
    FontWeight::FontWeight()
    {
    
    }
    
    FontWeightType FontWeight::type() const
    {
        return mType;
    }
    
    void FontWeight::setType(FontWeightType aType)
    {
        mType = aType;
    }
    
    unsigned long FontWeight::number() const
    {
        return mNumber;
    }
    
    void FontWeight::setNumber(unsigned long aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString FontWeight::toString()
    {
    
    }
    
    FontWeight FontWeight::fromString(CSSOMString str)
    {
    
    }
    
    LetterSpacing::LetterSpacing(LetterSpacing& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    LetterSpacing::LetterSpacing(LetterSpacingType keyword)
    {
    
    }
    
    LetterSpacing::LetterSpacing(NumericValue aNumber)
    {
    
    }
    
    LetterSpacing::LetterSpacing()
    {
    
    }
    
    LetterSpacingType LetterSpacing::type() const
    {
        return mType;
    }
    
    void LetterSpacing::setType(LetterSpacingType aType)
    {
        mType = aType;
    }
    
    NumericValue& LetterSpacing::number()
    {
        return mNumber;
    }
    
    void LetterSpacing::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString LetterSpacing::toString()
    {
    
    }
    
    LetterSpacing LetterSpacing::fromString(CSSOMString str)
    {
    
    }
    
    Perspective::Perspective(Perspective& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    Perspective::Perspective(PerspectiveType keyword)
    {
    
    }
    
    Perspective::Perspective(NumericValue aNumber)
    {
    
    }
    
    Perspective::Perspective()
    {
    
    }
    
    PerspectiveType Perspective::type() const
    {
        return mType;
    }
    
    void Perspective::setType(PerspectiveType aType)
    {
        mType = aType;
    }
    
    NumericValue& Perspective::number()
    {
        return mNumber;
    }
    
    void Perspective::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString Perspective::toString()
    {
    
    }
    
    NumericValue Perspective::fromString(CSSOMString str)
    {
    
    }
    
    PerspectiveOriginAxis::PerspectiveOriginAxis(PerspectiveOriginAxis& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    PerspectiveOriginAxis::PerspectiveOriginAxis(PerspectiveOriginType keyword)
    {
    
    }
    
    PerspectiveOriginAxis::PerspectiveOriginAxis(NumericValue aNumber)
    {
    
    }
    
    PerspectiveOriginAxis::PerspectiveOriginAxis()
    {
    
    }
    
    PerspectiveOriginType PerspectiveOriginAxis::type() const
    {
        return mType;
    }
    
    void PerspectiveOriginAxis::setType(PerspectiveOriginType aType)
    {
        mType = aType;
    }
    
    NumericValue& PerspectiveOriginAxis::number()
    {
        return mNumber;
    }
    
    void PerspectiveOriginAxis::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString PerspectiveOriginAxis::toString()
    {
    
    }
    
    PerspectiveOrigin::PerspectiveOrigin(PerspectiveOrigin& ref) : mAKeyword(ref.mAKeyword), mX(ref.mX), mY(ref.mY)
    {}
    
    PerspectiveOrigin::PerspectiveOrigin(short keyword)
    {
    
    }
    
    PerspectiveOrigin::PerspectiveOrigin(PerspectiveOriginAxis aX)
    {
    
    }
    
    PerspectiveOrigin::PerspectiveOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY)
    {
    
    }
    
    PerspectiveOrigin::PerspectiveOrigin()
    {
    
    }
    
    short PerspectiveOrigin::aKeyword() const
    {
        return mAKeyword;
    }
    
    void PerspectiveOrigin::setAKeyword(short aAKeyword)
    {
        mAKeyword = aAKeyword;
    }
    
    PerspectiveOriginAxis& PerspectiveOrigin::x()
    {
        return mX;
    }
    
    void PerspectiveOrigin::setX(PerspectiveOriginAxis& aX)
    {
        mX = aX;
    }
    
    PerspectiveOriginAxis& PerspectiveOrigin::y()
    {
        return mY;
    }
    
    void PerspectiveOrigin::setY(PerspectiveOriginAxis& aY)
    {
        mY = aY;
    }
    
    CSSOMString PerspectiveOrigin::toString()
    {
    
    }
    
    PerspectiveOrigin PerspectiveOrigin::fromString(CSSOMString str)
    {
    
    }
    
    Quotes::Quotes(Quotes& ref) : mAType(ref.mAType), mAfter(ref.mAfter), mBefore(ref.mBefore)
    {}
    
    Quotes::Quotes(QuotesType keyword)
    {
    
    }
    
    Quotes::Quotes(signed char aAfter)
    {
    
    }
    
    Quotes::Quotes(signed char aAfter, signed char aBefore)
    {
    
    }
    
    Quotes::Quotes()
    {
    
    }
    
    QuotesType Quotes::aType() const
    {
        return mAType;
    }
    
    void Quotes::setAType(QuotesType aAType)
    {
        mAType = aAType;
    }
    
    signed char Quotes::after() const
    {
        return mAfter;
    }
    
    void Quotes::setAfter(signed char aAfter)
    {
        mAfter = aAfter;
    }
    
    signed char Quotes::before() const
    {
        return mBefore;
    }
    
    void Quotes::setBefore(signed char aBefore)
    {
        mBefore = aBefore;
    }
    
    CSSOMString Quotes::toString()
    {
    
    }
    
    Quotes Quotes::fromString(CSSOMString str)
    {
    
    }
    
    SizeOf::SizeOf(SizeOf& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    SizeOf::SizeOf(SizeType keyword)
    {
    
    }
    
    SizeOf::SizeOf(NumericValue aNumber)
    {
    
    }
    
    SizeOf::SizeOf()
    {
    
    }
    
    SizeType SizeOf::type() const
    {
        return mType;
    }
    
    void SizeOf::setType(SizeType aType)
    {
        mType = aType;
    }
    
    NumericValue& SizeOf::number()
    {
        return mNumber;
    }
    
    void SizeOf::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString SizeOf::toString()
    {
    
    }
    
    Size::Size(Size& ref) : mAKeyword(ref.mAKeyword), mWidth(ref.mWidth), mHeight(ref.mHeight)
    {}
    
    Size::Size(short keyword)
    {
    
    }
    
    Size::Size(SizeOf aWidth)
    {
    
    }
    
    Size::Size(SizeOf aWidth, SizeOf aHeight)
    {
    
    }
    
    Size::Size()
    {
    
    }
    
    short Size::aKeyword() const
    {
        return mAKeyword;
    }
    
    void Size::setAKeyword(short aAKeyword)
    {
        mAKeyword = aAKeyword;
    }
    
    SizeOf& Size::width()
    {
        return mWidth;
    }
    
    void Size::setWidth(SizeOf& aWidth)
    {
        mWidth = aWidth;
    }
    
    SizeOf& Size::height()
    {
        return mHeight;
    }
    
    void Size::setHeight(SizeOf& aHeight)
    {
        mHeight = aHeight;
    }
    
    CSSOMString Size::toString()
    {
    
    }
    
    Size Size::fromString(CSSOMString str)
    {
    
    }
    
    TransformOrigin::TransformOrigin(TransformOrigin& ref) : mAKeyword(ref.mAKeyword), mX(ref.mX), mY(ref.mY), mZ(ref.mZ)
    {}
    
    TransformOrigin::TransformOrigin(short keyword)
    {
    
    }
    
    TransformOrigin::TransformOrigin(PerspectiveOriginAxis aX)
    {
    
    }
    
    TransformOrigin::TransformOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY)
    {
    
    }
    
    TransformOrigin::TransformOrigin(PerspectiveOriginAxis aX, PerspectiveOriginAxis aY, PerspectiveOriginAxis aZ)
    {
    
    }
    
    TransformOrigin::TransformOrigin()
    {
    
    }
    
    short TransformOrigin::aKeyword() const
    {
        return mAKeyword;
    }
    
    void TransformOrigin::setAKeyword(short aAKeyword)
    {
        mAKeyword = aAKeyword;
    }
    
    PerspectiveOriginAxis& TransformOrigin::x()
    {
        return mX;
    }
    
    void TransformOrigin::setX(PerspectiveOriginAxis& aX)
    {
        mX = aX;
    }
    
    PerspectiveOriginAxis& TransformOrigin::y()
    {
        return mY;
    }
    
    void TransformOrigin::setY(PerspectiveOriginAxis& aY)
    {
        mY = aY;
    }
    
    PerspectiveOriginAxis& TransformOrigin::z()
    {
        return mZ;
    }
    
    void TransformOrigin::setZ(PerspectiveOriginAxis& aZ)
    {
        mZ = aZ;
    }
    
    CSSOMString TransformOrigin::toString()
    {
    
    }
    
    TransformOrigin TransformOrigin::fromString(CSSOMString str)
    {
    
    }
    
    TransformModifier::TransformModifier(TransformModifier& ref) : mTransformType(ref.mTransformType), mOwner(ref.mOwner)
    {}
    
    TransformModifier::TransformModifier(unsigned short type)
    {
    
    }
    
    TransformModifier::TransformModifier()
    {
    
    }
    
    unsigned short TransformModifier::transformType() const
    {
        return mTransformType;
    }
    
    Transform* TransformModifier::owner() const
    {
        return mOwner;
    }
    
    CSSOMString TransformModifier::toString()
    {
    
    }
    
    void TransformModifier::remove()
    {
    
    }
    
    TransformMatrix::TransformMatrix(TransformMatrix& ref) : TransformModifier(ref), mA(ref.mA), mB(ref.mB), mC(ref.mC), mD(ref.mD), mTx(ref.mTx), mTy(ref.mTy)
    {}
    
    TransformMatrix::TransformMatrix(double aA, double aB, double aC, double aD, double aTx, double aTy)
    {
    
    }
    
    TransformMatrix::TransformMatrix()
    {
    
    }
    
    double TransformMatrix::a() const
    {
        return mA;
    }
    
    void TransformMatrix::setA(double aA)
    {
        mA = aA;
    }
    
    double TransformMatrix::b() const
    {
        return mB;
    }
    
    void TransformMatrix::setB(double aB)
    {
        mB = aB;
    }
    
    double TransformMatrix::c() const
    {
        return mC;
    }
    
    void TransformMatrix::setC(double aC)
    {
        mC = aC;
    }
    
    double TransformMatrix::d() const
    {
        return mD;
    }
    
    void TransformMatrix::setD(double aD)
    {
        mD = aD;
    }
    
    double TransformMatrix::tx() const
    {
        return mTx;
    }
    
    void TransformMatrix::setTx(double aTx)
    {
        mTx = aTx;
    }
    
    double TransformMatrix::ty() const
    {
        return mTy;
    }
    
    void TransformMatrix::setTy(double aTy)
    {
        mTy = aTy;
    }
    
    TransformMatrix TransformMatrix::fromString(CSSOMString str)
    {
    
    }
    
    TransformRotate::TransformRotate(TransformRotate& ref) : TransformModifier(ref), mAngle(ref.mAngle)
    {}
    
    TransformRotate::TransformRotate(NumericValue aAngle)
    {
    
    }
    
    TransformRotate::TransformRotate()
    {
    
    }
    
    NumericValue& TransformRotate::angle()
    {
        return mAngle;
    }
    
    void TransformRotate::setAngle(NumericValue& aAngle)
    {
        mAngle = aAngle;
    }
    
    TransformRotate TransformRotate::fromString(CSSOMString str)
    {
    
    }
    
    TransformScale::TransformScale(TransformScale& ref) : TransformModifier(ref), mSx(ref.mSx), mSy(ref.mSy)
    {}
    
    TransformScale::TransformScale(double aSx, double aSy)
    {
    
    }
    
    TransformScale::TransformScale()
    {
    
    }
    
    double TransformScale::sx() const
    {
        return mSx;
    }
    
    void TransformScale::setSx(double aSx)
    {
        mSx = aSx;
    }
    
    double TransformScale::sy() const
    {
        return mSy;
    }
    
    void TransformScale::setSy(double aSy)
    {
        mSy = aSy;
    }
    
    TransformScale TransformScale::fromString(CSSOMString str)
    {
    
    }
    
    TransformScaleX::TransformScaleX(TransformScaleX& ref) : TransformModifier(ref), mSx(ref.mSx)
    {}
    
    TransformScaleX::TransformScaleX(double aSx)
    {
    
    }
    
    TransformScaleX::TransformScaleX()
    {
    
    }
    
    double TransformScaleX::sx() const
    {
        return mSx;
    }
    
    void TransformScaleX::setSx(double aSx)
    {
        mSx = aSx;
    }
    
    TransformScaleX TransformScaleX::fromString(CSSOMString str)
    {
    
    }
    
    TransformScaleY::TransformScaleY(TransformScaleY& ref) : TransformModifier(ref), mSy(ref.mSy)
    {}
    
    TransformScaleY::TransformScaleY(double aSy)
    {
    
    }
    
    TransformScaleY::TransformScaleY()
    {
    
    }
    
    double TransformScaleY::sy() const
    {
        return mSy;
    }
    
    void TransformScaleY::setSy(double aSy)
    {
        mSy = aSy;
    }
    
    TransformScaleY TransformScaleY::fromString(CSSOMString str)
    {
    
    }
    
    TransformSkewX::TransformSkewX(TransformSkewX& ref) : TransformModifier(ref), mAngle(ref.mAngle)
    {}
    
    TransformSkewX::TransformSkewX(NumericValue aAngle)
    {
    
    }
    
    TransformSkewX::TransformSkewX()
    {
    
    }
    
    NumericValue& TransformSkewX::angle()
    {
        return mAngle;
    }
    
    void TransformSkewX::setAngle(NumericValue& aAngle)
    {
        mAngle = aAngle;
    }
    
    TransformSkewX TransformSkewX::fromString(CSSOMString str)
    {
    
    }
    
    TransformSkewY::TransformSkewY(TransformSkewY& ref) : TransformModifier(ref), mAngle(ref.mAngle)
    {}
    
    TransformSkewY::TransformSkewY(NumericValue aAngle)
    {
    
    }
    
    TransformSkewY::TransformSkewY()
    {
    
    }
    
    NumericValue& TransformSkewY::angle()
    {
        return mAngle;
    }
    
    void TransformSkewY::setAngle(NumericValue& aAngle)
    {
        mAngle = aAngle;
    }
    
    TransformSkewY TransformSkewY::fromString(CSSOMString str)
    {
    
    }
    
    TransformTranslate::TransformTranslate(TransformTranslate& ref) : TransformModifier(ref), mTx(ref.mTx), mTy(ref.mTy)
    {}
    
    TransformTranslate::TransformTranslate(double aTx, double aTy)
    {
    
    }
    
    TransformTranslate::TransformTranslate()
    {
    
    }
    
    double TransformTranslate::tx() const
    {
        return mTx;
    }
    
    void TransformTranslate::setTx(double aTx)
    {
        mTx = aTx;
    }
    
    double TransformTranslate::ty() const
    {
        return mTy;
    }
    
    void TransformTranslate::setTy(double aTy)
    {
        mTy = aTy;
    }
    
    TransformTranslate TransformTranslate::fromString(CSSOMString str)
    {
    
    }
    
    TransformTranslateX::TransformTranslateX(TransformTranslateX& ref) : TransformModifier(ref), mTx(ref.mTx)
    {}
    
    TransformTranslateX::TransformTranslateX(double aTx)
    {
    
    }
    
    TransformTranslateX::TransformTranslateX()
    {
    
    }
    
    double TransformTranslateX::tx() const
    {
        return mTx;
    }
    
    void TransformTranslateX::setTx(double aTx)
    {
        mTx = aTx;
    }
    
    TransformTranslateX TransformTranslateX::fromString(CSSOMString str)
    {
    
    }
    
    TransformTranslateY::TransformTranslateY(TransformTranslateY& ref) : TransformModifier(ref), mTy(ref.mTy)
    {}
    
    TransformTranslateY::TransformTranslateY(double aTy)
    {
    
    }
    
    TransformTranslateY::TransformTranslateY()
    {
    
    }
    
    double TransformTranslateY::ty() const
    {
        return mTy;
    }
    
    void TransformTranslateY::setTy(double aTy)
    {
        mTy = aTy;
    }
    
    TransformTranslateY TransformTranslateY::fromString(CSSOMString str)
    {
    
    }
    
    TransformList::TransformList(TransformList& ref)
    {}
    
    TransformList::TransformList()
    {
    
    }
    
    TransformModifier* TransformList::item(unsigned long index)
    {
    
    }
    
    unsigned long TransformList::length()
    {
    
    }
    
    void TransformList::appendModifier(TransformModifier* modifier)
    {
    
    }
    
    TransformModifier* TransformList::removeModifier(unsigned long index)
    {
    
    }
    
    Transform::Transform(Transform& ref) : mType(ref.mType), mModifiers(ref.mModifiers)
    {}
    
    Transform::Transform(TransformType keyword)
    {
    
    }
    
    Transform::Transform()
    {
    
    }
    
    TransformType Transform::type() const
    {
        return mType;
    }
    
    void Transform::setType(TransformType aType)
    {
        mType = aType;
    }
    
    TransformList& Transform::modifiers()
    {
        return mModifiers;
    }
    
    CSSOMString Transform::toString()
    {
    
    }
    
    Transform Transform::fromString(CSSOMString str)
    {
    
    }
    
    PropertyList::PropertyList(PropertyList& ref)
    {}
    
    PropertyList::PropertyList()
    {
    
    }
    
    CSSOMString PropertyList::item(unsigned long index)
    {
    
    }
    
    unsigned long PropertyList::length()
    {
    
    }
    
    void PropertyList::add(CSSOMString property)
    {
    
    }
    
    void PropertyList::remove(unsigned long index)
    {
    
    }
    
    CSSOMString PropertyList::toString()
    {
    
    }
    
    TransitionProperty::TransitionProperty(TransitionProperty& ref) : mType(ref.mType), mProperties(ref.mProperties)
    {}
    
    TransitionProperty::TransitionProperty(TransitionPropertyType keyword)
    {
    
    }
    
    TransitionProperty::TransitionProperty()
    {
    
    }
    
    TransitionPropertyType TransitionProperty::type() const
    {
        return mType;
    }
    
    void TransitionProperty::setType(TransitionPropertyType aType)
    {
        mType = aType;
    }
    
    PropertyList& TransitionProperty::properties()
    {
        return mProperties;
    }
    
    void TransitionProperty::setProperties(PropertyList& aProperties)
    {
        mProperties = aProperties;
    }
    
    VerticalAlign::VerticalAlign(VerticalAlign& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    VerticalAlign::VerticalAlign(VerticalAlignType keyword)
    {
    
    }
    
    VerticalAlign::VerticalAlign(NumericValue aNumber)
    {
    
    }
    
    VerticalAlign::VerticalAlign()
    {
    
    }
    
    VerticalAlignType VerticalAlign::type() const
    {
        return mType;
    }
    
    void VerticalAlign::setType(VerticalAlignType aType)
    {
        mType = aType;
    }
    
    NumericValue& VerticalAlign::number()
    {
        return mNumber;
    }
    
    void VerticalAlign::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString VerticalAlign::toString()
    {
    
    }
    
    VerticalAlign VerticalAlign::fromString(CSSOMString str)
    {
    
    }
    
    RadiusAxis::RadiusAxis(RadiusAxis& ref) : mType(ref.mType), mNumber(ref.mNumber)
    {}
    
    RadiusAxis::RadiusAxis(RadiusAxisType keyword)
    {
    
    }
    
    RadiusAxis::RadiusAxis(NumericValue aNumber)
    {
    
    }
    
    RadiusAxis::RadiusAxis()
    {
    
    }
    
    RadiusAxisType RadiusAxis::type() const
    {
        return mType;
    }
    
    void RadiusAxis::setType(RadiusAxisType aType)
    {
        mType = aType;
    }
    
    NumericValue& RadiusAxis::number()
    {
        return mNumber;
    }
    
    void RadiusAxis::setNumber(NumericValue& aNumber)
    {
        mNumber = aNumber;
    }
    
    CSSOMString RadiusAxis::toString()
    {
    
    }
    
    RadiusAxis RadiusAxis::fromString(CSSOMString str)
    {
    
    }
    
    PathData::PathData(PathData& ref) : mType(ref.mType), mPath(ref.mPath)
    {}
    
    PathData::PathData(PathDataType keyword)
    {
    
    }
    
    PathData::PathData(CSSOMString aPath)
    {
    
    }
    
    PathData::PathData()
    {
    
    }
    
    PathDataType PathData::type() const
    {
        return mType;
    }
    
    void PathData::setType(PathDataType aType)
    {
        mType = aType;
    }
    
    CSSOMString PathData::path() const
    {
        return mPath;
    }
    
    void PathData::setPath(CSSOMString aPath)
    {
        mPath = aPath;
    }
    
    CSSOMString PathData::toString()
    {
    
    }
    
    PathData PathData::fromString(CSSOMString str)
    {
    
    }
    
    Dasharray::Dasharray(Dasharray& ref)
    {}
    
    Dasharray::Dasharray()
    {
    
    }
    
    NumericValue Dasharray::item(unsigned long index)
    {
    
    }
    
    unsigned long Dasharray::length()
    {
    
    }
    
    void Dasharray::add(NumericValue property)
    {
    
    }
    
    void Dasharray::remove(unsigned long index)
    {
    
    }
    
    CSSOMString Dasharray::toString()
    {
    
    }
    
    Dasharray Dasharray::fromString(CSSOMString str)
    {
    
    }
    
    ElementStyleMetrics::ElementStyleMetrics(ElementStyleMetrics& ref) : StyleMetrics(ref), mAlignContent(ref.mAlignContent), mAlignItems(ref.mAlignItems), mAlignSelf(ref.mAlignSelf), mAnimationDelay(ref.mAnimationDelay), mAnimationDirection(ref.mAnimationDirection), mAnimationDuration(ref.mAnimationDuration), mAnimationFillMode(ref.mAnimationFillMode), mAnimationIterationCount(ref.mAnimationIterationCount), mAnimationName(ref.mAnimationName), mAnimationPlayState(ref.mAnimationPlayState), mAnimationTimingFunction(ref.mAnimationTimingFunction), mBackfaceVisibility(ref.mBackfaceVisibility), mBackgroundAttachment(ref.mBackgroundAttachment), mBackgroundClip(ref.mBackgroundClip), mBackgroundColor(ref.mBackgroundColor), mBackgroundImage(ref.mBackgroundImage), mBackgroundOriginX(ref.mBackgroundOriginX), mBackgroundOriginY(ref.mBackgroundOriginY), mBackgroundPositionX(ref.mBackgroundPositionX), mBackgroundPositionY(ref.mBackgroundPositionY), mBackgroundRepeat(ref.mBackgroundRepeat), mBackgroundSize(ref.mBackgroundSize), mBorderBottomColor(ref.mBorderBottomColor), mBorderBottomLeftRadius(ref.mBorderBottomLeftRadius), mBorderBottomRightRadius(ref.mBorderBottomRightRadius), mBorderBottomStyle(ref.mBorderBottomStyle), mBorderBottomWidth(ref.mBorderBottomWidth), mBorderCollapse(ref.mBorderCollapse), mBorderLeftColor(ref.mBorderLeftColor), mBorderLeftStyle(ref.mBorderLeftStyle), mBorderLeftWidth(ref.mBorderLeftWidth), mBorderRightColor(ref.mBorderRightColor), mBorderRightStyle(ref.mBorderRightStyle), mBorderRightWidth(ref.mBorderRightWidth), mBorderSpacing(ref.mBorderSpacing), mBorderTopColor(ref.mBorderTopColor), mBorderTopLeftRadius(ref.mBorderTopLeftRadius), mBorderTopRightRadius(ref.mBorderTopRightRadius), mBorderTopStyle(ref.mBorderTopStyle), mBorderTopWidth(ref.mBorderTopWidth), mBottom(ref.mBottom), mBoxShadow(ref.mBoxShadow), mBoxSizing(ref.mBoxSizing), mCaptionSide(ref.mCaptionSide), mCaretColor(ref.mCaretColor), mClear(ref.mClear), mClip(ref.mClip), mColor(ref.mColor), mColumnCount(ref.mColumnCount), mColumnFill(ref.mColumnFill), mColumnGap(ref.mColumnGap), mColumnRuleColor(ref.mColumnRuleColor), mColumnRuleStyle(ref.mColumnRuleStyle), mColumnRuleWidth(ref.mColumnRuleWidth), mColumnSpan(ref.mColumnSpan), mColumnWidth(ref.mColumnWidth), mCounterIncrement(ref.mCounterIncrement), mCounterReset(ref.mCounterReset), mCursor(ref.mCursor), mDirection(ref.mDirection), mDisplay(ref.mDisplay), mEmptyCells(ref.mEmptyCells), mFlexBasis(ref.mFlexBasis), mFlexDirection(ref.mFlexDirection), mFlexGrow(ref.mFlexGrow), mFlexShrink(ref.mFlexShrink), mFlexWrap(ref.mFlexWrap), mCssFloat(ref.mCssFloat), mFontFamily(ref.mFontFamily), mFontFeatureSettings(ref.mFontFeatureSettings), mFontKerning(ref.mFontKerning), mFontSize(ref.mFontSize), mFontStretch(ref.mFontStretch), mFontStyle(ref.mFontStyle), mFontVariant(ref.mFontVariant), mFontWeight(ref.mFontWeight), mHeight(ref.mHeight), mHyphens(ref.mHyphens), mJustifyContent(ref.mJustifyContent), mJustifyItems(ref.mJustifyItems), mJustifySelf(ref.mJustifySelf), mLeft(ref.mLeft), mLetterSpacing(ref.mLetterSpacing), mLineBreak(ref.mLineBreak), mLineHeight(ref.mLineHeight), mListStyleImage(ref.mListStyleImage), mListStylePosition(ref.mListStylePosition), mListStyleType(ref.mListStyleType), mMarginBottom(ref.mMarginBottom), mMarginLeft(ref.mMarginLeft), mMarginRight(ref.mMarginRight), mMarginTop(ref.mMarginTop), mMaxHeight(ref.mMaxHeight), mMaxWidth(ref.mMaxWidth), mMinHeight(ref.mMinHeight), mMinWidth(ref.mMinWidth), mOpacity(ref.mOpacity), mOutlineColor(ref.mOutlineColor), mOutlineOffset(ref.mOutlineOffset), mOutlineStyle(ref.mOutlineStyle), mOutlineWidth(ref.mOutlineWidth), mOverflowWrap(ref.mOverflowWrap), mOverflowX(ref.mOverflowX), mOverflowY(ref.mOverflowY), mPaddingBottom(ref.mPaddingBottom), mPaddingLeft(ref.mPaddingLeft), mPaddingRight(ref.mPaddingRight), mPaddingTop(ref.mPaddingTop), mPageBreakAfter(ref.mPageBreakAfter), mPageBreakBefore(ref.mPageBreakBefore), mPageBreakInside(ref.mPageBreakInside), mPerspective(ref.mPerspective), mPerspectiveOrigin(ref.mPerspectiveOrigin), mPosition(ref.mPosition), mQuotes(ref.mQuotes), mResize(ref.mResize), mRight(ref.mRight), mSize(ref.mSize), mTabSize(ref.mTabSize), mTableLayout(ref.mTableLayout), mTextAlign(ref.mTextAlign), mTextDecoration(ref.mTextDecoration), mTextIndent(ref.mTextIndent), mTextOverflow(ref.mTextOverflow), mTextShadow(ref.mTextShadow), mTextTransform(ref.mTextTransform), mTop(ref.mTop), mTransformOrigin(ref.mTransformOrigin), mTransformStyle(ref.mTransformStyle), mTransform(ref.mTransform), mTransitionDelay(ref.mTransitionDelay), mTransitionDuration(ref.mTransitionDuration), mTransitionProperty(ref.mTransitionProperty), mTransitionTimingFunction(ref.mTransitionTimingFunction), mUnicodeBidi(ref.mUnicodeBidi), mVerticalAlign(ref.mVerticalAlign), mVisibility(ref.mVisibility), mWhiteSpace(ref.mWhiteSpace), mWidows(ref.mWidows), mWidth(ref.mWidth), mWordBreak(ref.mWordBreak), mWordSpacing(ref.mWordSpacing), mWordWrap(ref.mWordWrap), mZIndex(ref.mZIndex)
    {}
    
    ElementStyleMetrics::ElementStyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    ElementStyleMetrics::ElementStyleMetrics()
    {
    
    }
    
    AlignContent ElementStyleMetrics::alignContent() const
    {
        return mAlignContent;
    }
    
    void ElementStyleMetrics::setAlignContent(AlignContent aAlignContent)
    {
        mAlignContent = aAlignContent;
    }
    
    AlignItems ElementStyleMetrics::alignItems() const
    {
        return mAlignItems;
    }
    
    void ElementStyleMetrics::setAlignItems(AlignItems aAlignItems)
    {
        mAlignItems = aAlignItems;
    }
    
    AlignSelf ElementStyleMetrics::alignSelf() const
    {
        return mAlignSelf;
    }
    
    void ElementStyleMetrics::setAlignSelf(AlignSelf aAlignSelf)
    {
        mAlignSelf = aAlignSelf;
    }
    
    PeriodValue& ElementStyleMetrics::animationDelay()
    {
        return mAnimationDelay;
    }
    
    void ElementStyleMetrics::setAnimationDelay(PeriodValue& aAnimationDelay)
    {
        mAnimationDelay = aAnimationDelay;
    }
    
    AnimationDirection ElementStyleMetrics::animationDirection() const
    {
        return mAnimationDirection;
    }
    
    void ElementStyleMetrics::setAnimationDirection(AnimationDirection aAnimationDirection)
    {
        mAnimationDirection = aAnimationDirection;
    }
    
    PeriodValue& ElementStyleMetrics::animationDuration()
    {
        return mAnimationDuration;
    }
    
    void ElementStyleMetrics::setAnimationDuration(PeriodValue& aAnimationDuration)
    {
        mAnimationDuration = aAnimationDuration;
    }
    
    AnimationFillMode ElementStyleMetrics::animationFillMode() const
    {
        return mAnimationFillMode;
    }
    
    void ElementStyleMetrics::setAnimationFillMode(AnimationFillMode aAnimationFillMode)
    {
        mAnimationFillMode = aAnimationFillMode;
    }
    
    IntegerValue& ElementStyleMetrics::animationIterationCount()
    {
        return mAnimationIterationCount;
    }
    
    void ElementStyleMetrics::setAnimationIterationCount(IntegerValue& aAnimationIterationCount)
    {
        mAnimationIterationCount = aAnimationIterationCount;
    }
    
    StringValue& ElementStyleMetrics::animationName()
    {
        return mAnimationName;
    }
    
    void ElementStyleMetrics::setAnimationName(StringValue& aAnimationName)
    {
        mAnimationName = aAnimationName;
    }
    
    AnimationPlayState ElementStyleMetrics::animationPlayState() const
    {
        return mAnimationPlayState;
    }
    
    void ElementStyleMetrics::setAnimationPlayState(AnimationPlayState aAnimationPlayState)
    {
        mAnimationPlayState = aAnimationPlayState;
    }
    
    AnimationTimingFunction& ElementStyleMetrics::animationTimingFunction()
    {
        return mAnimationTimingFunction;
    }
    
    void ElementStyleMetrics::setAnimationTimingFunction(AnimationTimingFunction& aAnimationTimingFunction)
    {
        mAnimationTimingFunction = aAnimationTimingFunction;
    }
    
    BackfaceVisibility ElementStyleMetrics::backfaceVisibility() const
    {
        return mBackfaceVisibility;
    }
    
    void ElementStyleMetrics::setBackfaceVisibility(BackfaceVisibility aBackfaceVisibility)
    {
        mBackfaceVisibility = aBackfaceVisibility;
    }
    
    BackgroundAttachment& ElementStyleMetrics::backgroundAttachment()
    {
        return mBackgroundAttachment;
    }
    
    void ElementStyleMetrics::setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment)
    {
        mBackgroundAttachment = aBackgroundAttachment;
    }
    
    BackgroundClip ElementStyleMetrics::backgroundClip() const
    {
        return mBackgroundClip;
    }
    
    void ElementStyleMetrics::setBackgroundClip(BackgroundClip aBackgroundClip)
    {
        mBackgroundClip = aBackgroundClip;
    }
    
    ColorValue& ElementStyleMetrics::backgroundColor()
    {
        return mBackgroundColor;
    }
    
    void ElementStyleMetrics::setBackgroundColor(ColorValue& aBackgroundColor)
    {
        mBackgroundColor = aBackgroundColor;
    }
    
    BackgroundImage& ElementStyleMetrics::backgroundImage()
    {
        return mBackgroundImage;
    }
    
    void ElementStyleMetrics::setBackgroundImage(BackgroundImage& aBackgroundImage)
    {
        mBackgroundImage = aBackgroundImage;
    }
    
    BackgroundOriginAxis ElementStyleMetrics::backgroundOriginX() const
    {
        return mBackgroundOriginX;
    }
    
    void ElementStyleMetrics::setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX)
    {
        mBackgroundOriginX = aBackgroundOriginX;
    }
    
    BackgroundOriginAxis ElementStyleMetrics::backgroundOriginY() const
    {
        return mBackgroundOriginY;
    }
    
    void ElementStyleMetrics::setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY)
    {
        mBackgroundOriginY = aBackgroundOriginY;
    }
    
    BackgroundPositionAxis& ElementStyleMetrics::backgroundPositionX()
    {
        return mBackgroundPositionX;
    }
    
    void ElementStyleMetrics::setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX)
    {
        mBackgroundPositionX = aBackgroundPositionX;
    }
    
    BackgroundPositionAxis& ElementStyleMetrics::backgroundPositionY()
    {
        return mBackgroundPositionY;
    }
    
    void ElementStyleMetrics::setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY)
    {
        mBackgroundPositionY = aBackgroundPositionY;
    }
    
    BackgroundRepeat& ElementStyleMetrics::backgroundRepeat()
    {
        return mBackgroundRepeat;
    }
    
    void ElementStyleMetrics::setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat)
    {
        mBackgroundRepeat = aBackgroundRepeat;
    }
    
    BackgroundSize& ElementStyleMetrics::backgroundSize()
    {
        return mBackgroundSize;
    }
    
    void ElementStyleMetrics::setBackgroundSize(BackgroundSize& aBackgroundSize)
    {
        mBackgroundSize = aBackgroundSize;
    }
    
    ColorValue& ElementStyleMetrics::borderBottomColor()
    {
        return mBorderBottomColor;
    }
    
    void ElementStyleMetrics::setBorderBottomColor(ColorValue& aBorderBottomColor)
    {
        mBorderBottomColor = aBorderBottomColor;
    }
    
    BorderRadius& ElementStyleMetrics::borderBottomLeftRadius()
    {
        return mBorderBottomLeftRadius;
    }
    
    void ElementStyleMetrics::setBorderBottomLeftRadius(BorderRadius& aBorderBottomLeftRadius)
    {
        mBorderBottomLeftRadius = aBorderBottomLeftRadius;
    }
    
    BorderRadius& ElementStyleMetrics::borderBottomRightRadius()
    {
        return mBorderBottomRightRadius;
    }
    
    void ElementStyleMetrics::setBorderBottomRightRadius(BorderRadius& aBorderBottomRightRadius)
    {
        mBorderBottomRightRadius = aBorderBottomRightRadius;
    }
    
    BorderStyle ElementStyleMetrics::borderBottomStyle() const
    {
        return mBorderBottomStyle;
    }
    
    void ElementStyleMetrics::setBorderBottomStyle(BorderStyle aBorderBottomStyle)
    {
        mBorderBottomStyle = aBorderBottomStyle;
    }
    
    NumericValue& ElementStyleMetrics::borderBottomWidth()
    {
        return mBorderBottomWidth;
    }
    
    void ElementStyleMetrics::setBorderBottomWidth(NumericValue& aBorderBottomWidth)
    {
        mBorderBottomWidth = aBorderBottomWidth;
    }
    
    BorderCollapse ElementStyleMetrics::borderCollapse() const
    {
        return mBorderCollapse;
    }
    
    void ElementStyleMetrics::setBorderCollapse(BorderCollapse aBorderCollapse)
    {
        mBorderCollapse = aBorderCollapse;
    }
    
    ColorValue& ElementStyleMetrics::borderLeftColor()
    {
        return mBorderLeftColor;
    }
    
    void ElementStyleMetrics::setBorderLeftColor(ColorValue& aBorderLeftColor)
    {
        mBorderLeftColor = aBorderLeftColor;
    }
    
    BorderStyle ElementStyleMetrics::borderLeftStyle() const
    {
        return mBorderLeftStyle;
    }
    
    void ElementStyleMetrics::setBorderLeftStyle(BorderStyle aBorderLeftStyle)
    {
        mBorderLeftStyle = aBorderLeftStyle;
    }
    
    NumericValue& ElementStyleMetrics::borderLeftWidth()
    {
        return mBorderLeftWidth;
    }
    
    void ElementStyleMetrics::setBorderLeftWidth(NumericValue& aBorderLeftWidth)
    {
        mBorderLeftWidth = aBorderLeftWidth;
    }
    
    ColorValue& ElementStyleMetrics::borderRightColor()
    {
        return mBorderRightColor;
    }
    
    void ElementStyleMetrics::setBorderRightColor(ColorValue& aBorderRightColor)
    {
        mBorderRightColor = aBorderRightColor;
    }
    
    BorderStyle ElementStyleMetrics::borderRightStyle() const
    {
        return mBorderRightStyle;
    }
    
    void ElementStyleMetrics::setBorderRightStyle(BorderStyle aBorderRightStyle)
    {
        mBorderRightStyle = aBorderRightStyle;
    }
    
    NumericValue& ElementStyleMetrics::borderRightWidth()
    {
        return mBorderRightWidth;
    }
    
    void ElementStyleMetrics::setBorderRightWidth(NumericValue& aBorderRightWidth)
    {
        mBorderRightWidth = aBorderRightWidth;
    }
    
    BorderSpacing& ElementStyleMetrics::borderSpacing()
    {
        return mBorderSpacing;
    }
    
    void ElementStyleMetrics::setBorderSpacing(BorderSpacing& aBorderSpacing)
    {
        mBorderSpacing = aBorderSpacing;
    }
    
    BorderStyle ElementStyleMetrics::borderTopColor() const
    {
        return mBorderTopColor;
    }
    
    void ElementStyleMetrics::setBorderTopColor(BorderStyle aBorderTopColor)
    {
        mBorderTopColor = aBorderTopColor;
    }
    
    BorderRadius& ElementStyleMetrics::borderTopLeftRadius()
    {
        return mBorderTopLeftRadius;
    }
    
    void ElementStyleMetrics::setBorderTopLeftRadius(BorderRadius& aBorderTopLeftRadius)
    {
        mBorderTopLeftRadius = aBorderTopLeftRadius;
    }
    
    BorderRadius& ElementStyleMetrics::borderTopRightRadius()
    {
        return mBorderTopRightRadius;
    }
    
    void ElementStyleMetrics::setBorderTopRightRadius(BorderRadius& aBorderTopRightRadius)
    {
        mBorderTopRightRadius = aBorderTopRightRadius;
    }
    
    BorderStyle ElementStyleMetrics::borderTopStyle() const
    {
        return mBorderTopStyle;
    }
    
    void ElementStyleMetrics::setBorderTopStyle(BorderStyle aBorderTopStyle)
    {
        mBorderTopStyle = aBorderTopStyle;
    }
    
    NumericValue& ElementStyleMetrics::borderTopWidth()
    {
        return mBorderTopWidth;
    }
    
    void ElementStyleMetrics::setBorderTopWidth(NumericValue& aBorderTopWidth)
    {
        mBorderTopWidth = aBorderTopWidth;
    }
    
    NumericValue& ElementStyleMetrics::bottom()
    {
        return mBottom;
    }
    
    void ElementStyleMetrics::setBottom(NumericValue& aBottom)
    {
        mBottom = aBottom;
    }
    
    BoxShadow& ElementStyleMetrics::boxShadow()
    {
        return mBoxShadow;
    }
    
    void ElementStyleMetrics::setBoxShadow(BoxShadow& aBoxShadow)
    {
        mBoxShadow = aBoxShadow;
    }
    
    BoxSizing ElementStyleMetrics::boxSizing() const
    {
        return mBoxSizing;
    }
    
    void ElementStyleMetrics::setBoxSizing(BoxSizing aBoxSizing)
    {
        mBoxSizing = aBoxSizing;
    }
    
    CaptionSide ElementStyleMetrics::captionSide() const
    {
        return mCaptionSide;
    }
    
    void ElementStyleMetrics::setCaptionSide(CaptionSide aCaptionSide)
    {
        mCaptionSide = aCaptionSide;
    }
    
    ColorValue& ElementStyleMetrics::caretColor()
    {
        return mCaretColor;
    }
    
    void ElementStyleMetrics::setCaretColor(ColorValue& aCaretColor)
    {
        mCaretColor = aCaretColor;
    }
    
    Clear ElementStyleMetrics::clear() const
    {
        return mClear;
    }
    
    void ElementStyleMetrics::setClear(Clear aClear)
    {
        mClear = aClear;
    }
    
    Clip& ElementStyleMetrics::clip()
    {
        return mClip;
    }
    
    void ElementStyleMetrics::setClip(Clip& aClip)
    {
        mClip = aClip;
    }
    
    ColorValue& ElementStyleMetrics::color()
    {
        return mColor;
    }
    
    void ElementStyleMetrics::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    IntegerValue& ElementStyleMetrics::columnCount()
    {
        return mColumnCount;
    }
    
    void ElementStyleMetrics::setColumnCount(IntegerValue& aColumnCount)
    {
        mColumnCount = aColumnCount;
    }
    
    columnFill& ElementStyleMetrics::columnFill()
    {
        return mColumnFill;
    }
    
    void ElementStyleMetrics::setColumnFill(columnFill& aColumnFill)
    {
        mColumnFill = aColumnFill;
    }
    
    NumericValue& ElementStyleMetrics::columnGap()
    {
        return mColumnGap;
    }
    
    void ElementStyleMetrics::setColumnGap(NumericValue& aColumnGap)
    {
        mColumnGap = aColumnGap;
    }
    
    ColorValue& ElementStyleMetrics::columnRuleColor()
    {
        return mColumnRuleColor;
    }
    
    void ElementStyleMetrics::setColumnRuleColor(ColorValue& aColumnRuleColor)
    {
        mColumnRuleColor = aColumnRuleColor;
    }
    
    ColumnRuleStyle& ElementStyleMetrics::columnRuleStyle()
    {
        return mColumnRuleStyle;
    }
    
    void ElementStyleMetrics::setColumnRuleStyle(ColumnRuleStyle& aColumnRuleStyle)
    {
        mColumnRuleStyle = aColumnRuleStyle;
    }
    
    NumericValue& ElementStyleMetrics::columnRuleWidth()
    {
        return mColumnRuleWidth;
    }
    
    void ElementStyleMetrics::setColumnRuleWidth(NumericValue& aColumnRuleWidth)
    {
        mColumnRuleWidth = aColumnRuleWidth;
    }
    
    ColumnSpan ElementStyleMetrics::columnSpan() const
    {
        return mColumnSpan;
    }
    
    void ElementStyleMetrics::setColumnSpan(ColumnSpan aColumnSpan)
    {
        mColumnSpan = aColumnSpan;
    }
    
    IntegerValue& ElementStyleMetrics::columnWidth()
    {
        return mColumnWidth;
    }
    
    void ElementStyleMetrics::setColumnWidth(IntegerValue& aColumnWidth)
    {
        mColumnWidth = aColumnWidth;
    }
    
    Counter& ElementStyleMetrics::counterIncrement()
    {
        return mCounterIncrement;
    }
    
    void ElementStyleMetrics::setCounterIncrement(Counter& aCounterIncrement)
    {
        mCounterIncrement = aCounterIncrement;
    }
    
    Counter& ElementStyleMetrics::counterReset()
    {
        return mCounterReset;
    }
    
    void ElementStyleMetrics::setCounterReset(Counter& aCounterReset)
    {
        mCounterReset = aCounterReset;
    }
    
    Cursor& ElementStyleMetrics::cursor()
    {
        return mCursor;
    }
    
    void ElementStyleMetrics::setCursor(Cursor& aCursor)
    {
        mCursor = aCursor;
    }
    
    Direction ElementStyleMetrics::direction() const
    {
        return mDirection;
    }
    
    void ElementStyleMetrics::setDirection(Direction aDirection)
    {
        mDirection = aDirection;
    }
    
    Display ElementStyleMetrics::display() const
    {
        return mDisplay;
    }
    
    void ElementStyleMetrics::setDisplay(Display aDisplay)
    {
        mDisplay = aDisplay;
    }
    
    EmptyCells ElementStyleMetrics::emptyCells() const
    {
        return mEmptyCells;
    }
    
    void ElementStyleMetrics::setEmptyCells(EmptyCells aEmptyCells)
    {
        mEmptyCells = aEmptyCells;
    }
    
    FlexBasis& ElementStyleMetrics::flexBasis()
    {
        return mFlexBasis;
    }
    
    void ElementStyleMetrics::setFlexBasis(FlexBasis& aFlexBasis)
    {
        mFlexBasis = aFlexBasis;
    }
    
    FlexDirection ElementStyleMetrics::flexDirection() const
    {
        return mFlexDirection;
    }
    
    void ElementStyleMetrics::setFlexDirection(FlexDirection aFlexDirection)
    {
        mFlexDirection = aFlexDirection;
    }
    
    IntegerValue& ElementStyleMetrics::flexGrow()
    {
        return mFlexGrow;
    }
    
    void ElementStyleMetrics::setFlexGrow(IntegerValue& aFlexGrow)
    {
        mFlexGrow = aFlexGrow;
    }
    
    IntegerValue& ElementStyleMetrics::flexShrink()
    {
        return mFlexShrink;
    }
    
    void ElementStyleMetrics::setFlexShrink(IntegerValue& aFlexShrink)
    {
        mFlexShrink = aFlexShrink;
    }
    
    FlexWrap ElementStyleMetrics::flexWrap() const
    {
        return mFlexWrap;
    }
    
    void ElementStyleMetrics::setFlexWrap(FlexWrap aFlexWrap)
    {
        mFlexWrap = aFlexWrap;
    }
    
    Float ElementStyleMetrics::cssFloat() const
    {
        return mCssFloat;
    }
    
    void ElementStyleMetrics::setCssFloat(Float aCssFloat)
    {
        mCssFloat = aCssFloat;
    }
    
    StringValue& ElementStyleMetrics::fontFamily()
    {
        return mFontFamily;
    }
    
    void ElementStyleMetrics::setFontFamily(StringValue& aFontFamily)
    {
        mFontFamily = aFontFamily;
    }
    
    FontFeatureSettings& ElementStyleMetrics::fontFeatureSettings()
    {
        return mFontFeatureSettings;
    }
    
    void ElementStyleMetrics::setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings)
    {
        mFontFeatureSettings = aFontFeatureSettings;
    }
    
    FontKerning ElementStyleMetrics::fontKerning() const
    {
        return mFontKerning;
    }
    
    void ElementStyleMetrics::setFontKerning(FontKerning aFontKerning)
    {
        mFontKerning = aFontKerning;
    }
    
    NumericValue& ElementStyleMetrics::fontSize()
    {
        return mFontSize;
    }
    
    void ElementStyleMetrics::setFontSize(NumericValue& aFontSize)
    {
        mFontSize = aFontSize;
    }
    
    FontStretch ElementStyleMetrics::fontStretch() const
    {
        return mFontStretch;
    }
    
    void ElementStyleMetrics::setFontStretch(FontStretch aFontStretch)
    {
        mFontStretch = aFontStretch;
    }
    
    FontStyle ElementStyleMetrics::fontStyle() const
    {
        return mFontStyle;
    }
    
    void ElementStyleMetrics::setFontStyle(FontStyle aFontStyle)
    {
        mFontStyle = aFontStyle;
    }
    
    FontVariant ElementStyleMetrics::fontVariant() const
    {
        return mFontVariant;
    }
    
    void ElementStyleMetrics::setFontVariant(FontVariant aFontVariant)
    {
        mFontVariant = aFontVariant;
    }
    
    FontWeight& ElementStyleMetrics::fontWeight()
    {
        return mFontWeight;
    }
    
    void ElementStyleMetrics::setFontWeight(FontWeight& aFontWeight)
    {
        mFontWeight = aFontWeight;
    }
    
    NumericValue& ElementStyleMetrics::height()
    {
        return mHeight;
    }
    
    void ElementStyleMetrics::setHeight(NumericValue& aHeight)
    {
        mHeight = aHeight;
    }
    
    Hyphens ElementStyleMetrics::hyphens() const
    {
        return mHyphens;
    }
    
    void ElementStyleMetrics::setHyphens(Hyphens aHyphens)
    {
        mHyphens = aHyphens;
    }
    
    JustifyContent ElementStyleMetrics::justifyContent() const
    {
        return mJustifyContent;
    }
    
    void ElementStyleMetrics::setJustifyContent(JustifyContent aJustifyContent)
    {
        mJustifyContent = aJustifyContent;
    }
    
    JustifyItems ElementStyleMetrics::justifyItems() const
    {
        return mJustifyItems;
    }
    
    void ElementStyleMetrics::setJustifyItems(JustifyItems aJustifyItems)
    {
        mJustifyItems = aJustifyItems;
    }
    
    JustifySelf ElementStyleMetrics::justifySelf() const
    {
        return mJustifySelf;
    }
    
    void ElementStyleMetrics::setJustifySelf(JustifySelf aJustifySelf)
    {
        mJustifySelf = aJustifySelf;
    }
    
    NumericValue& ElementStyleMetrics::left()
    {
        return mLeft;
    }
    
    void ElementStyleMetrics::setLeft(NumericValue& aLeft)
    {
        mLeft = aLeft;
    }
    
    LetterSpacing& ElementStyleMetrics::letterSpacing()
    {
        return mLetterSpacing;
    }
    
    void ElementStyleMetrics::setLetterSpacing(LetterSpacing& aLetterSpacing)
    {
        mLetterSpacing = aLetterSpacing;
    }
    
    LineBreak ElementStyleMetrics::lineBreak() const
    {
        return mLineBreak;
    }
    
    void ElementStyleMetrics::setLineBreak(LineBreak aLineBreak)
    {
        mLineBreak = aLineBreak;
    }
    
    LineHeight& ElementStyleMetrics::lineHeight()
    {
        return mLineHeight;
    }
    
    void ElementStyleMetrics::setLineHeight(LineHeight& aLineHeight)
    {
        mLineHeight = aLineHeight;
    }
    
    ListStyleImage& ElementStyleMetrics::listStyleImage()
    {
        return mListStyleImage;
    }
    
    void ElementStyleMetrics::setListStyleImage(ListStyleImage& aListStyleImage)
    {
        mListStyleImage = aListStyleImage;
    }
    
    ListStylePosition ElementStyleMetrics::listStylePosition() const
    {
        return mListStylePosition;
    }
    
    void ElementStyleMetrics::setListStylePosition(ListStylePosition aListStylePosition)
    {
        mListStylePosition = aListStylePosition;
    }
    
    ListStyleType ElementStyleMetrics::listStyleType() const
    {
        return mListStyleType;
    }
    
    void ElementStyleMetrics::setListStyleType(ListStyleType aListStyleType)
    {
        mListStyleType = aListStyleType;
    }
    
    NumericValue& ElementStyleMetrics::marginBottom()
    {
        return mMarginBottom;
    }
    
    void ElementStyleMetrics::setMarginBottom(NumericValue& aMarginBottom)
    {
        mMarginBottom = aMarginBottom;
    }
    
    NumericValue& ElementStyleMetrics::marginLeft()
    {
        return mMarginLeft;
    }
    
    void ElementStyleMetrics::setMarginLeft(NumericValue& aMarginLeft)
    {
        mMarginLeft = aMarginLeft;
    }
    
    NumericValue& ElementStyleMetrics::marginRight()
    {
        return mMarginRight;
    }
    
    void ElementStyleMetrics::setMarginRight(NumericValue& aMarginRight)
    {
        mMarginRight = aMarginRight;
    }
    
    NumericValue& ElementStyleMetrics::marginTop()
    {
        return mMarginTop;
    }
    
    void ElementStyleMetrics::setMarginTop(NumericValue& aMarginTop)
    {
        mMarginTop = aMarginTop;
    }
    
    NumericValue& ElementStyleMetrics::maxHeight()
    {
        return mMaxHeight;
    }
    
    void ElementStyleMetrics::setMaxHeight(NumericValue& aMaxHeight)
    {
        mMaxHeight = aMaxHeight;
    }
    
    NumericValue& ElementStyleMetrics::maxWidth()
    {
        return mMaxWidth;
    }
    
    void ElementStyleMetrics::setMaxWidth(NumericValue& aMaxWidth)
    {
        mMaxWidth = aMaxWidth;
    }
    
    NumericValue& ElementStyleMetrics::minHeight()
    {
        return mMinHeight;
    }
    
    void ElementStyleMetrics::setMinHeight(NumericValue& aMinHeight)
    {
        mMinHeight = aMinHeight;
    }
    
    NumericValue& ElementStyleMetrics::minWidth()
    {
        return mMinWidth;
    }
    
    void ElementStyleMetrics::setMinWidth(NumericValue& aMinWidth)
    {
        mMinWidth = aMinWidth;
    }
    
    FloatValue& ElementStyleMetrics::opacity()
    {
        return mOpacity;
    }
    
    void ElementStyleMetrics::setOpacity(FloatValue& aOpacity)
    {
        mOpacity = aOpacity;
    }
    
    ColorValue& ElementStyleMetrics::outlineColor()
    {
        return mOutlineColor;
    }
    
    void ElementStyleMetrics::setOutlineColor(ColorValue& aOutlineColor)
    {
        mOutlineColor = aOutlineColor;
    }
    
    NumericValue& ElementStyleMetrics::outlineOffset()
    {
        return mOutlineOffset;
    }
    
    void ElementStyleMetrics::setOutlineOffset(NumericValue& aOutlineOffset)
    {
        mOutlineOffset = aOutlineOffset;
    }
    
    OutlineStyle& ElementStyleMetrics::outlineStyle()
    {
        return mOutlineStyle;
    }
    
    void ElementStyleMetrics::setOutlineStyle(OutlineStyle& aOutlineStyle)
    {
        mOutlineStyle = aOutlineStyle;
    }
    
    NumericValue& ElementStyleMetrics::outlineWidth()
    {
        return mOutlineWidth;
    }
    
    void ElementStyleMetrics::setOutlineWidth(NumericValue& aOutlineWidth)
    {
        mOutlineWidth = aOutlineWidth;
    }
    
    OverflowWrap ElementStyleMetrics::overflowWrap() const
    {
        return mOverflowWrap;
    }
    
    void ElementStyleMetrics::setOverflowWrap(OverflowWrap aOverflowWrap)
    {
        mOverflowWrap = aOverflowWrap;
    }
    
    Overflow ElementStyleMetrics::overflowX() const
    {
        return mOverflowX;
    }
    
    void ElementStyleMetrics::setOverflowX(Overflow aOverflowX)
    {
        mOverflowX = aOverflowX;
    }
    
    Overflow ElementStyleMetrics::overflowY() const
    {
        return mOverflowY;
    }
    
    void ElementStyleMetrics::setOverflowY(Overflow aOverflowY)
    {
        mOverflowY = aOverflowY;
    }
    
    NumericValue& ElementStyleMetrics::paddingBottom()
    {
        return mPaddingBottom;
    }
    
    void ElementStyleMetrics::setPaddingBottom(NumericValue& aPaddingBottom)
    {
        mPaddingBottom = aPaddingBottom;
    }
    
    NumericValue& ElementStyleMetrics::paddingLeft()
    {
        return mPaddingLeft;
    }
    
    void ElementStyleMetrics::setPaddingLeft(NumericValue& aPaddingLeft)
    {
        mPaddingLeft = aPaddingLeft;
    }
    
    NumericValue& ElementStyleMetrics::paddingRight()
    {
        return mPaddingRight;
    }
    
    void ElementStyleMetrics::setPaddingRight(NumericValue& aPaddingRight)
    {
        mPaddingRight = aPaddingRight;
    }
    
    NumericValue& ElementStyleMetrics::paddingTop()
    {
        return mPaddingTop;
    }
    
    void ElementStyleMetrics::setPaddingTop(NumericValue& aPaddingTop)
    {
        mPaddingTop = aPaddingTop;
    }
    
    PageBreakAfter ElementStyleMetrics::pageBreakAfter() const
    {
        return mPageBreakAfter;
    }
    
    void ElementStyleMetrics::setPageBreakAfter(PageBreakAfter aPageBreakAfter)
    {
        mPageBreakAfter = aPageBreakAfter;
    }
    
    PageBreakBefore& ElementStyleMetrics::pageBreakBefore()
    {
        return mPageBreakBefore;
    }
    
    void ElementStyleMetrics::setPageBreakBefore(PageBreakBefore& aPageBreakBefore)
    {
        mPageBreakBefore = aPageBreakBefore;
    }
    
    PageBreakInside ElementStyleMetrics::pageBreakInside() const
    {
        return mPageBreakInside;
    }
    
    void ElementStyleMetrics::setPageBreakInside(PageBreakInside aPageBreakInside)
    {
        mPageBreakInside = aPageBreakInside;
    }
    
    Perspective& ElementStyleMetrics::perspective()
    {
        return mPerspective;
    }
    
    void ElementStyleMetrics::setPerspective(Perspective& aPerspective)
    {
        mPerspective = aPerspective;
    }
    
    PerspectiveOrigin& ElementStyleMetrics::perspectiveOrigin()
    {
        return mPerspectiveOrigin;
    }
    
    void ElementStyleMetrics::setPerspectiveOrigin(PerspectiveOrigin& aPerspectiveOrigin)
    {
        mPerspectiveOrigin = aPerspectiveOrigin;
    }
    
    Position ElementStyleMetrics::position() const
    {
        return mPosition;
    }
    
    void ElementStyleMetrics::setPosition(Position aPosition)
    {
        mPosition = aPosition;
    }
    
    Quotes& ElementStyleMetrics::quotes()
    {
        return mQuotes;
    }
    
    void ElementStyleMetrics::setQuotes(Quotes& aQuotes)
    {
        mQuotes = aQuotes;
    }
    
    Resize ElementStyleMetrics::resize() const
    {
        return mResize;
    }
    
    void ElementStyleMetrics::setResize(Resize aResize)
    {
        mResize = aResize;
    }
    
    NumericValue& ElementStyleMetrics::right()
    {
        return mRight;
    }
    
    void ElementStyleMetrics::setRight(NumericValue& aRight)
    {
        mRight = aRight;
    }
    
    Size& ElementStyleMetrics::size()
    {
        return mSize;
    }
    
    void ElementStyleMetrics::setSize(Size& aSize)
    {
        mSize = aSize;
    }
    
    IntegerValue& ElementStyleMetrics::tabSize()
    {
        return mTabSize;
    }
    
    void ElementStyleMetrics::setTabSize(IntegerValue& aTabSize)
    {
        mTabSize = aTabSize;
    }
    
    TableLayout ElementStyleMetrics::tableLayout() const
    {
        return mTableLayout;
    }
    
    void ElementStyleMetrics::setTableLayout(TableLayout aTableLayout)
    {
        mTableLayout = aTableLayout;
    }
    
    TextAlign ElementStyleMetrics::textAlign() const
    {
        return mTextAlign;
    }
    
    void ElementStyleMetrics::setTextAlign(TextAlign aTextAlign)
    {
        mTextAlign = aTextAlign;
    }
    
    TextDecoration ElementStyleMetrics::textDecoration() const
    {
        return mTextDecoration;
    }
    
    void ElementStyleMetrics::setTextDecoration(TextDecoration aTextDecoration)
    {
        mTextDecoration = aTextDecoration;
    }
    
    NumericValue& ElementStyleMetrics::textIndent()
    {
        return mTextIndent;
    }
    
    void ElementStyleMetrics::setTextIndent(NumericValue& aTextIndent)
    {
        mTextIndent = aTextIndent;
    }
    
    TextOverflow ElementStyleMetrics::textOverflow() const
    {
        return mTextOverflow;
    }
    
    void ElementStyleMetrics::setTextOverflow(TextOverflow aTextOverflow)
    {
        mTextOverflow = aTextOverflow;
    }
    
    TextShadow& ElementStyleMetrics::textShadow()
    {
        return mTextShadow;
    }
    
    void ElementStyleMetrics::setTextShadow(TextShadow& aTextShadow)
    {
        mTextShadow = aTextShadow;
    }
    
    TextTransform ElementStyleMetrics::textTransform() const
    {
        return mTextTransform;
    }
    
    void ElementStyleMetrics::setTextTransform(TextTransform aTextTransform)
    {
        mTextTransform = aTextTransform;
    }
    
    NumericValue& ElementStyleMetrics::top()
    {
        return mTop;
    }
    
    void ElementStyleMetrics::setTop(NumericValue& aTop)
    {
        mTop = aTop;
    }
    
    TransformOrigin& ElementStyleMetrics::transformOrigin()
    {
        return mTransformOrigin;
    }
    
    void ElementStyleMetrics::setTransformOrigin(TransformOrigin& aTransformOrigin)
    {
        mTransformOrigin = aTransformOrigin;
    }
    
    TransformStyle ElementStyleMetrics::transformStyle() const
    {
        return mTransformStyle;
    }
    
    void ElementStyleMetrics::setTransformStyle(TransformStyle aTransformStyle)
    {
        mTransformStyle = aTransformStyle;
    }
    
    Transform& ElementStyleMetrics::transform()
    {
        return mTransform;
    }
    
    void ElementStyleMetrics::setTransform(Transform& aTransform)
    {
        mTransform = aTransform;
    }
    
    PeriodValue& ElementStyleMetrics::transitionDelay()
    {
        return mTransitionDelay;
    }
    
    void ElementStyleMetrics::setTransitionDelay(PeriodValue& aTransitionDelay)
    {
        mTransitionDelay = aTransitionDelay;
    }
    
    PeriodValue& ElementStyleMetrics::transitionDuration()
    {
        return mTransitionDuration;
    }
    
    void ElementStyleMetrics::setTransitionDuration(PeriodValue& aTransitionDuration)
    {
        mTransitionDuration = aTransitionDuration;
    }
    
    TransitionProperty& ElementStyleMetrics::transitionProperty()
    {
        return mTransitionProperty;
    }
    
    void ElementStyleMetrics::setTransitionProperty(TransitionProperty& aTransitionProperty)
    {
        mTransitionProperty = aTransitionProperty;
    }
    
    TransitionTimingFunction& ElementStyleMetrics::transitionTimingFunction()
    {
        return mTransitionTimingFunction;
    }
    
    void ElementStyleMetrics::setTransitionTimingFunction(TransitionTimingFunction& aTransitionTimingFunction)
    {
        mTransitionTimingFunction = aTransitionTimingFunction;
    }
    
    UnicodeBidi ElementStyleMetrics::unicodeBidi() const
    {
        return mUnicodeBidi;
    }
    
    void ElementStyleMetrics::setUnicodeBidi(UnicodeBidi aUnicodeBidi)
    {
        mUnicodeBidi = aUnicodeBidi;
    }
    
    VerticalAlign& ElementStyleMetrics::verticalAlign()
    {
        return mVerticalAlign;
    }
    
    void ElementStyleMetrics::setVerticalAlign(VerticalAlign& aVerticalAlign)
    {
        mVerticalAlign = aVerticalAlign;
    }
    
    Visibility ElementStyleMetrics::visibility() const
    {
        return mVisibility;
    }
    
    void ElementStyleMetrics::setVisibility(Visibility aVisibility)
    {
        mVisibility = aVisibility;
    }
    
    WhiteSpace ElementStyleMetrics::whiteSpace() const
    {
        return mWhiteSpace;
    }
    
    void ElementStyleMetrics::setWhiteSpace(WhiteSpace aWhiteSpace)
    {
        mWhiteSpace = aWhiteSpace;
    }
    
    IntegerValue& ElementStyleMetrics::widows()
    {
        return mWidows;
    }
    
    void ElementStyleMetrics::setWidows(IntegerValue& aWidows)
    {
        mWidows = aWidows;
    }
    
    NumericValue& ElementStyleMetrics::width()
    {
        return mWidth;
    }
    
    void ElementStyleMetrics::setWidth(NumericValue& aWidth)
    {
        mWidth = aWidth;
    }
    
    WordBreak& ElementStyleMetrics::wordBreak()
    {
        return mWordBreak;
    }
    
    void ElementStyleMetrics::setWordBreak(WordBreak& aWordBreak)
    {
        mWordBreak = aWordBreak;
    }
    
    WordSpacing& ElementStyleMetrics::wordSpacing()
    {
        return mWordSpacing;
    }
    
    void ElementStyleMetrics::setWordSpacing(WordSpacing& aWordSpacing)
    {
        mWordSpacing = aWordSpacing;
    }
    
    WordWrap ElementStyleMetrics::wordWrap() const
    {
        return mWordWrap;
    }
    
    void ElementStyleMetrics::setWordWrap(WordWrap aWordWrap)
    {
        mWordWrap = aWordWrap;
    }
    
    IntegerValue& ElementStyleMetrics::zIndex()
    {
        return mZIndex;
    }
    
    void ElementStyleMetrics::setZIndex(IntegerValue& aZIndex)
    {
        mZIndex = aZIndex;
    }
    
    FirstLetterStyleMetrics::FirstLetterStyleMetrics(FirstLetterStyleMetrics& ref) : StyleMetrics(ref), mBackgroundAttachment(ref.mBackgroundAttachment), mBackgroundClip(ref.mBackgroundClip), mBackgroundColor(ref.mBackgroundColor), mBackgroundImage(ref.mBackgroundImage), mBackgroundOriginX(ref.mBackgroundOriginX), mBackgroundOriginY(ref.mBackgroundOriginY), mBackgroundPositionX(ref.mBackgroundPositionX), mBackgroundPositionY(ref.mBackgroundPositionY), mBackgroundRepeat(ref.mBackgroundRepeat), mBackgroundSize(ref.mBackgroundSize), mBorderBottomColor(ref.mBorderBottomColor), mBorderBottomLeftRadius(ref.mBorderBottomLeftRadius), mBorderBottomRightRadius(ref.mBorderBottomRightRadius), mBorderBottomStyle(ref.mBorderBottomStyle), mBorderBottomWidth(ref.mBorderBottomWidth), mBorderCollapse(ref.mBorderCollapse), mBorderLeftColor(ref.mBorderLeftColor), mBorderLeftStyle(ref.mBorderLeftStyle), mBorderLeftWidth(ref.mBorderLeftWidth), mBorderRightColor(ref.mBorderRightColor), mBorderRightStyle(ref.mBorderRightStyle), mBorderRightWidth(ref.mBorderRightWidth), mBorderSpacing(ref.mBorderSpacing), mBorderTopColor(ref.mBorderTopColor), mBorderTopLeftRadius(ref.mBorderTopLeftRadius), mBorderTopRightRadius(ref.mBorderTopRightRadius), mBorderTopStyle(ref.mBorderTopStyle), mBorderTopWidth(ref.mBorderTopWidth), mBoxShadow(ref.mBoxShadow), mColor(ref.mColor), mCssFloat(ref.mCssFloat), mFontFamily(ref.mFontFamily), mFontFeatureSettings(ref.mFontFeatureSettings), mFontKerning(ref.mFontKerning), mFontSize(ref.mFontSize), mFontStretch(ref.mFontStretch), mFontStyle(ref.mFontStyle), mFontVariant(ref.mFontVariant), mFontWeight(ref.mFontWeight), mLetterSpacing(ref.mLetterSpacing), mLineHeight(ref.mLineHeight), mMarginBottom(ref.mMarginBottom), mMarginLeft(ref.mMarginLeft), mMarginRight(ref.mMarginRight), mMarginTop(ref.mMarginTop), mPaddingBottom(ref.mPaddingBottom), mPaddingLeft(ref.mPaddingLeft), mPaddingRight(ref.mPaddingRight), mPaddingTop(ref.mPaddingTop), mTextDecoration(ref.mTextDecoration), mTextShadow(ref.mTextShadow), mTextTransform(ref.mTextTransform), mVerticalAlign(ref.mVerticalAlign), mWordSpacing(ref.mWordSpacing)
    {}
    
    FirstLetterStyleMetrics::FirstLetterStyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    FirstLetterStyleMetrics::FirstLetterStyleMetrics()
    {
    
    }
    
    BackgroundAttachment& FirstLetterStyleMetrics::backgroundAttachment()
    {
        return mBackgroundAttachment;
    }
    
    void FirstLetterStyleMetrics::setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment)
    {
        mBackgroundAttachment = aBackgroundAttachment;
    }
    
    BackgroundClip FirstLetterStyleMetrics::backgroundClip() const
    {
        return mBackgroundClip;
    }
    
    void FirstLetterStyleMetrics::setBackgroundClip(BackgroundClip aBackgroundClip)
    {
        mBackgroundClip = aBackgroundClip;
    }
    
    ColorValue& FirstLetterStyleMetrics::backgroundColor()
    {
        return mBackgroundColor;
    }
    
    void FirstLetterStyleMetrics::setBackgroundColor(ColorValue& aBackgroundColor)
    {
        mBackgroundColor = aBackgroundColor;
    }
    
    BackgroundImage& FirstLetterStyleMetrics::backgroundImage()
    {
        return mBackgroundImage;
    }
    
    void FirstLetterStyleMetrics::setBackgroundImage(BackgroundImage& aBackgroundImage)
    {
        mBackgroundImage = aBackgroundImage;
    }
    
    BackgroundOriginAxis FirstLetterStyleMetrics::backgroundOriginX() const
    {
        return mBackgroundOriginX;
    }
    
    void FirstLetterStyleMetrics::setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX)
    {
        mBackgroundOriginX = aBackgroundOriginX;
    }
    
    BackgroundOriginAxis FirstLetterStyleMetrics::backgroundOriginY() const
    {
        return mBackgroundOriginY;
    }
    
    void FirstLetterStyleMetrics::setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY)
    {
        mBackgroundOriginY = aBackgroundOriginY;
    }
    
    BackgroundPositionAxis& FirstLetterStyleMetrics::backgroundPositionX()
    {
        return mBackgroundPositionX;
    }
    
    void FirstLetterStyleMetrics::setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX)
    {
        mBackgroundPositionX = aBackgroundPositionX;
    }
    
    BackgroundPositionAxis& FirstLetterStyleMetrics::backgroundPositionY()
    {
        return mBackgroundPositionY;
    }
    
    void FirstLetterStyleMetrics::setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY)
    {
        mBackgroundPositionY = aBackgroundPositionY;
    }
    
    BackgroundRepeat& FirstLetterStyleMetrics::backgroundRepeat()
    {
        return mBackgroundRepeat;
    }
    
    void FirstLetterStyleMetrics::setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat)
    {
        mBackgroundRepeat = aBackgroundRepeat;
    }
    
    BackgroundSize& FirstLetterStyleMetrics::backgroundSize()
    {
        return mBackgroundSize;
    }
    
    void FirstLetterStyleMetrics::setBackgroundSize(BackgroundSize& aBackgroundSize)
    {
        mBackgroundSize = aBackgroundSize;
    }
    
    ColorValue& FirstLetterStyleMetrics::borderBottomColor()
    {
        return mBorderBottomColor;
    }
    
    void FirstLetterStyleMetrics::setBorderBottomColor(ColorValue& aBorderBottomColor)
    {
        mBorderBottomColor = aBorderBottomColor;
    }
    
    BorderRadius& FirstLetterStyleMetrics::borderBottomLeftRadius()
    {
        return mBorderBottomLeftRadius;
    }
    
    void FirstLetterStyleMetrics::setBorderBottomLeftRadius(BorderRadius& aBorderBottomLeftRadius)
    {
        mBorderBottomLeftRadius = aBorderBottomLeftRadius;
    }
    
    BorderRadius& FirstLetterStyleMetrics::borderBottomRightRadius()
    {
        return mBorderBottomRightRadius;
    }
    
    void FirstLetterStyleMetrics::setBorderBottomRightRadius(BorderRadius& aBorderBottomRightRadius)
    {
        mBorderBottomRightRadius = aBorderBottomRightRadius;
    }
    
    BorderStyle FirstLetterStyleMetrics::borderBottomStyle() const
    {
        return mBorderBottomStyle;
    }
    
    void FirstLetterStyleMetrics::setBorderBottomStyle(BorderStyle aBorderBottomStyle)
    {
        mBorderBottomStyle = aBorderBottomStyle;
    }
    
    NumericValue& FirstLetterStyleMetrics::borderBottomWidth()
    {
        return mBorderBottomWidth;
    }
    
    void FirstLetterStyleMetrics::setBorderBottomWidth(NumericValue& aBorderBottomWidth)
    {
        mBorderBottomWidth = aBorderBottomWidth;
    }
    
    BorderCollapse FirstLetterStyleMetrics::borderCollapse() const
    {
        return mBorderCollapse;
    }
    
    void FirstLetterStyleMetrics::setBorderCollapse(BorderCollapse aBorderCollapse)
    {
        mBorderCollapse = aBorderCollapse;
    }
    
    ColorValue& FirstLetterStyleMetrics::borderLeftColor()
    {
        return mBorderLeftColor;
    }
    
    void FirstLetterStyleMetrics::setBorderLeftColor(ColorValue& aBorderLeftColor)
    {
        mBorderLeftColor = aBorderLeftColor;
    }
    
    BorderStyle FirstLetterStyleMetrics::borderLeftStyle() const
    {
        return mBorderLeftStyle;
    }
    
    void FirstLetterStyleMetrics::setBorderLeftStyle(BorderStyle aBorderLeftStyle)
    {
        mBorderLeftStyle = aBorderLeftStyle;
    }
    
    NumericValue& FirstLetterStyleMetrics::borderLeftWidth()
    {
        return mBorderLeftWidth;
    }
    
    void FirstLetterStyleMetrics::setBorderLeftWidth(NumericValue& aBorderLeftWidth)
    {
        mBorderLeftWidth = aBorderLeftWidth;
    }
    
    ColorValue& FirstLetterStyleMetrics::borderRightColor()
    {
        return mBorderRightColor;
    }
    
    void FirstLetterStyleMetrics::setBorderRightColor(ColorValue& aBorderRightColor)
    {
        mBorderRightColor = aBorderRightColor;
    }
    
    BorderStyle FirstLetterStyleMetrics::borderRightStyle() const
    {
        return mBorderRightStyle;
    }
    
    void FirstLetterStyleMetrics::setBorderRightStyle(BorderStyle aBorderRightStyle)
    {
        mBorderRightStyle = aBorderRightStyle;
    }
    
    NumericValue& FirstLetterStyleMetrics::borderRightWidth()
    {
        return mBorderRightWidth;
    }
    
    void FirstLetterStyleMetrics::setBorderRightWidth(NumericValue& aBorderRightWidth)
    {
        mBorderRightWidth = aBorderRightWidth;
    }
    
    BorderSpacing& FirstLetterStyleMetrics::borderSpacing()
    {
        return mBorderSpacing;
    }
    
    void FirstLetterStyleMetrics::setBorderSpacing(BorderSpacing& aBorderSpacing)
    {
        mBorderSpacing = aBorderSpacing;
    }
    
    BorderStyle FirstLetterStyleMetrics::borderTopColor() const
    {
        return mBorderTopColor;
    }
    
    void FirstLetterStyleMetrics::setBorderTopColor(BorderStyle aBorderTopColor)
    {
        mBorderTopColor = aBorderTopColor;
    }
    
    BorderRadius& FirstLetterStyleMetrics::borderTopLeftRadius()
    {
        return mBorderTopLeftRadius;
    }
    
    void FirstLetterStyleMetrics::setBorderTopLeftRadius(BorderRadius& aBorderTopLeftRadius)
    {
        mBorderTopLeftRadius = aBorderTopLeftRadius;
    }
    
    BorderRadius& FirstLetterStyleMetrics::borderTopRightRadius()
    {
        return mBorderTopRightRadius;
    }
    
    void FirstLetterStyleMetrics::setBorderTopRightRadius(BorderRadius& aBorderTopRightRadius)
    {
        mBorderTopRightRadius = aBorderTopRightRadius;
    }
    
    BorderStyle FirstLetterStyleMetrics::borderTopStyle() const
    {
        return mBorderTopStyle;
    }
    
    void FirstLetterStyleMetrics::setBorderTopStyle(BorderStyle aBorderTopStyle)
    {
        mBorderTopStyle = aBorderTopStyle;
    }
    
    NumericValue& FirstLetterStyleMetrics::borderTopWidth()
    {
        return mBorderTopWidth;
    }
    
    void FirstLetterStyleMetrics::setBorderTopWidth(NumericValue& aBorderTopWidth)
    {
        mBorderTopWidth = aBorderTopWidth;
    }
    
    BoxShadow& FirstLetterStyleMetrics::boxShadow()
    {
        return mBoxShadow;
    }
    
    void FirstLetterStyleMetrics::setBoxShadow(BoxShadow& aBoxShadow)
    {
        mBoxShadow = aBoxShadow;
    }
    
    ColorValue& FirstLetterStyleMetrics::color()
    {
        return mColor;
    }
    
    void FirstLetterStyleMetrics::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    Float FirstLetterStyleMetrics::cssFloat() const
    {
        return mCssFloat;
    }
    
    void FirstLetterStyleMetrics::setCssFloat(Float aCssFloat)
    {
        mCssFloat = aCssFloat;
    }
    
    StringValue& FirstLetterStyleMetrics::fontFamily()
    {
        return mFontFamily;
    }
    
    void FirstLetterStyleMetrics::setFontFamily(StringValue& aFontFamily)
    {
        mFontFamily = aFontFamily;
    }
    
    FontFeatureSettings& FirstLetterStyleMetrics::fontFeatureSettings()
    {
        return mFontFeatureSettings;
    }
    
    void FirstLetterStyleMetrics::setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings)
    {
        mFontFeatureSettings = aFontFeatureSettings;
    }
    
    FontKerning FirstLetterStyleMetrics::fontKerning() const
    {
        return mFontKerning;
    }
    
    void FirstLetterStyleMetrics::setFontKerning(FontKerning aFontKerning)
    {
        mFontKerning = aFontKerning;
    }
    
    NumericValue& FirstLetterStyleMetrics::fontSize()
    {
        return mFontSize;
    }
    
    void FirstLetterStyleMetrics::setFontSize(NumericValue& aFontSize)
    {
        mFontSize = aFontSize;
    }
    
    FontStretch FirstLetterStyleMetrics::fontStretch() const
    {
        return mFontStretch;
    }
    
    void FirstLetterStyleMetrics::setFontStretch(FontStretch aFontStretch)
    {
        mFontStretch = aFontStretch;
    }
    
    FontStyle FirstLetterStyleMetrics::fontStyle() const
    {
        return mFontStyle;
    }
    
    void FirstLetterStyleMetrics::setFontStyle(FontStyle aFontStyle)
    {
        mFontStyle = aFontStyle;
    }
    
    FontVariant FirstLetterStyleMetrics::fontVariant() const
    {
        return mFontVariant;
    }
    
    void FirstLetterStyleMetrics::setFontVariant(FontVariant aFontVariant)
    {
        mFontVariant = aFontVariant;
    }
    
    FontWeight& FirstLetterStyleMetrics::fontWeight()
    {
        return mFontWeight;
    }
    
    void FirstLetterStyleMetrics::setFontWeight(FontWeight& aFontWeight)
    {
        mFontWeight = aFontWeight;
    }
    
    LetterSpacing& FirstLetterStyleMetrics::letterSpacing()
    {
        return mLetterSpacing;
    }
    
    void FirstLetterStyleMetrics::setLetterSpacing(LetterSpacing& aLetterSpacing)
    {
        mLetterSpacing = aLetterSpacing;
    }
    
    LineHeight& FirstLetterStyleMetrics::lineHeight()
    {
        return mLineHeight;
    }
    
    void FirstLetterStyleMetrics::setLineHeight(LineHeight& aLineHeight)
    {
        mLineHeight = aLineHeight;
    }
    
    NumericValue& FirstLetterStyleMetrics::marginBottom()
    {
        return mMarginBottom;
    }
    
    void FirstLetterStyleMetrics::setMarginBottom(NumericValue& aMarginBottom)
    {
        mMarginBottom = aMarginBottom;
    }
    
    NumericValue& FirstLetterStyleMetrics::marginLeft()
    {
        return mMarginLeft;
    }
    
    void FirstLetterStyleMetrics::setMarginLeft(NumericValue& aMarginLeft)
    {
        mMarginLeft = aMarginLeft;
    }
    
    NumericValue& FirstLetterStyleMetrics::marginRight()
    {
        return mMarginRight;
    }
    
    void FirstLetterStyleMetrics::setMarginRight(NumericValue& aMarginRight)
    {
        mMarginRight = aMarginRight;
    }
    
    NumericValue& FirstLetterStyleMetrics::marginTop()
    {
        return mMarginTop;
    }
    
    void FirstLetterStyleMetrics::setMarginTop(NumericValue& aMarginTop)
    {
        mMarginTop = aMarginTop;
    }
    
    NumericValue& FirstLetterStyleMetrics::paddingBottom()
    {
        return mPaddingBottom;
    }
    
    void FirstLetterStyleMetrics::setPaddingBottom(NumericValue& aPaddingBottom)
    {
        mPaddingBottom = aPaddingBottom;
    }
    
    NumericValue& FirstLetterStyleMetrics::paddingLeft()
    {
        return mPaddingLeft;
    }
    
    void FirstLetterStyleMetrics::setPaddingLeft(NumericValue& aPaddingLeft)
    {
        mPaddingLeft = aPaddingLeft;
    }
    
    NumericValue& FirstLetterStyleMetrics::paddingRight()
    {
        return mPaddingRight;
    }
    
    void FirstLetterStyleMetrics::setPaddingRight(NumericValue& aPaddingRight)
    {
        mPaddingRight = aPaddingRight;
    }
    
    NumericValue& FirstLetterStyleMetrics::paddingTop()
    {
        return mPaddingTop;
    }
    
    void FirstLetterStyleMetrics::setPaddingTop(NumericValue& aPaddingTop)
    {
        mPaddingTop = aPaddingTop;
    }
    
    TextDecoration FirstLetterStyleMetrics::textDecoration() const
    {
        return mTextDecoration;
    }
    
    void FirstLetterStyleMetrics::setTextDecoration(TextDecoration aTextDecoration)
    {
        mTextDecoration = aTextDecoration;
    }
    
    TextShadow& FirstLetterStyleMetrics::textShadow()
    {
        return mTextShadow;
    }
    
    void FirstLetterStyleMetrics::setTextShadow(TextShadow& aTextShadow)
    {
        mTextShadow = aTextShadow;
    }
    
    TextTransform FirstLetterStyleMetrics::textTransform() const
    {
        return mTextTransform;
    }
    
    void FirstLetterStyleMetrics::setTextTransform(TextTransform aTextTransform)
    {
        mTextTransform = aTextTransform;
    }
    
    VerticalAlign& FirstLetterStyleMetrics::verticalAlign()
    {
        return mVerticalAlign;
    }
    
    void FirstLetterStyleMetrics::setVerticalAlign(VerticalAlign& aVerticalAlign)
    {
        mVerticalAlign = aVerticalAlign;
    }
    
    WordSpacing& FirstLetterStyleMetrics::wordSpacing()
    {
        return mWordSpacing;
    }
    
    void FirstLetterStyleMetrics::setWordSpacing(WordSpacing& aWordSpacing)
    {
        mWordSpacing = aWordSpacing;
    }
    
    FirstLineStyleMetrics::FirstLineStyleMetrics(FirstLineStyleMetrics& ref) : StyleMetrics(ref), mBackgroundAttachment(ref.mBackgroundAttachment), mBackgroundClip(ref.mBackgroundClip), mBackgroundColor(ref.mBackgroundColor), mBackgroundImage(ref.mBackgroundImage), mBackgroundOriginX(ref.mBackgroundOriginX), mBackgroundOriginY(ref.mBackgroundOriginY), mBackgroundPositionX(ref.mBackgroundPositionX), mBackgroundPositionY(ref.mBackgroundPositionY), mBackgroundRepeat(ref.mBackgroundRepeat), mBackgroundSize(ref.mBackgroundSize), mColor(ref.mColor), mFontFamily(ref.mFontFamily), mFontFeatureSettings(ref.mFontFeatureSettings), mFontKerning(ref.mFontKerning), mFontSize(ref.mFontSize), mFontStretch(ref.mFontStretch), mFontStyle(ref.mFontStyle), mFontVariant(ref.mFontVariant), mFontWeight(ref.mFontWeight), mLetterSpacing(ref.mLetterSpacing), mLineHeight(ref.mLineHeight), mTextDecoration(ref.mTextDecoration), mTextShadow(ref.mTextShadow), mTextTransform(ref.mTextTransform), mVerticalAlign(ref.mVerticalAlign), mWordSpacing(ref.mWordSpacing)
    {}
    
    FirstLineStyleMetrics::FirstLineStyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    FirstLineStyleMetrics::FirstLineStyleMetrics()
    {
    
    }
    
    BackgroundAttachment& FirstLineStyleMetrics::backgroundAttachment()
    {
        return mBackgroundAttachment;
    }
    
    void FirstLineStyleMetrics::setBackgroundAttachment(BackgroundAttachment& aBackgroundAttachment)
    {
        mBackgroundAttachment = aBackgroundAttachment;
    }
    
    BackgroundClip FirstLineStyleMetrics::backgroundClip() const
    {
        return mBackgroundClip;
    }
    
    void FirstLineStyleMetrics::setBackgroundClip(BackgroundClip aBackgroundClip)
    {
        mBackgroundClip = aBackgroundClip;
    }
    
    ColorValue& FirstLineStyleMetrics::backgroundColor()
    {
        return mBackgroundColor;
    }
    
    void FirstLineStyleMetrics::setBackgroundColor(ColorValue& aBackgroundColor)
    {
        mBackgroundColor = aBackgroundColor;
    }
    
    BackgroundImage& FirstLineStyleMetrics::backgroundImage()
    {
        return mBackgroundImage;
    }
    
    void FirstLineStyleMetrics::setBackgroundImage(BackgroundImage& aBackgroundImage)
    {
        mBackgroundImage = aBackgroundImage;
    }
    
    BackgroundOriginAxis FirstLineStyleMetrics::backgroundOriginX() const
    {
        return mBackgroundOriginX;
    }
    
    void FirstLineStyleMetrics::setBackgroundOriginX(BackgroundOriginAxis aBackgroundOriginX)
    {
        mBackgroundOriginX = aBackgroundOriginX;
    }
    
    BackgroundOriginAxis FirstLineStyleMetrics::backgroundOriginY() const
    {
        return mBackgroundOriginY;
    }
    
    void FirstLineStyleMetrics::setBackgroundOriginY(BackgroundOriginAxis aBackgroundOriginY)
    {
        mBackgroundOriginY = aBackgroundOriginY;
    }
    
    BackgroundPositionAxis& FirstLineStyleMetrics::backgroundPositionX()
    {
        return mBackgroundPositionX;
    }
    
    void FirstLineStyleMetrics::setBackgroundPositionX(BackgroundPositionAxis& aBackgroundPositionX)
    {
        mBackgroundPositionX = aBackgroundPositionX;
    }
    
    BackgroundPositionAxis& FirstLineStyleMetrics::backgroundPositionY()
    {
        return mBackgroundPositionY;
    }
    
    void FirstLineStyleMetrics::setBackgroundPositionY(BackgroundPositionAxis& aBackgroundPositionY)
    {
        mBackgroundPositionY = aBackgroundPositionY;
    }
    
    BackgroundRepeat& FirstLineStyleMetrics::backgroundRepeat()
    {
        return mBackgroundRepeat;
    }
    
    void FirstLineStyleMetrics::setBackgroundRepeat(BackgroundRepeat& aBackgroundRepeat)
    {
        mBackgroundRepeat = aBackgroundRepeat;
    }
    
    BackgroundSize& FirstLineStyleMetrics::backgroundSize()
    {
        return mBackgroundSize;
    }
    
    void FirstLineStyleMetrics::setBackgroundSize(BackgroundSize& aBackgroundSize)
    {
        mBackgroundSize = aBackgroundSize;
    }
    
    ColorValue& FirstLineStyleMetrics::color()
    {
        return mColor;
    }
    
    void FirstLineStyleMetrics::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    StringValue& FirstLineStyleMetrics::fontFamily()
    {
        return mFontFamily;
    }
    
    void FirstLineStyleMetrics::setFontFamily(StringValue& aFontFamily)
    {
        mFontFamily = aFontFamily;
    }
    
    FontFeatureSettings& FirstLineStyleMetrics::fontFeatureSettings()
    {
        return mFontFeatureSettings;
    }
    
    void FirstLineStyleMetrics::setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings)
    {
        mFontFeatureSettings = aFontFeatureSettings;
    }
    
    FontKerning FirstLineStyleMetrics::fontKerning() const
    {
        return mFontKerning;
    }
    
    void FirstLineStyleMetrics::setFontKerning(FontKerning aFontKerning)
    {
        mFontKerning = aFontKerning;
    }
    
    NumericValue& FirstLineStyleMetrics::fontSize()
    {
        return mFontSize;
    }
    
    void FirstLineStyleMetrics::setFontSize(NumericValue& aFontSize)
    {
        mFontSize = aFontSize;
    }
    
    FontStretch FirstLineStyleMetrics::fontStretch() const
    {
        return mFontStretch;
    }
    
    void FirstLineStyleMetrics::setFontStretch(FontStretch aFontStretch)
    {
        mFontStretch = aFontStretch;
    }
    
    FontStyle FirstLineStyleMetrics::fontStyle() const
    {
        return mFontStyle;
    }
    
    void FirstLineStyleMetrics::setFontStyle(FontStyle aFontStyle)
    {
        mFontStyle = aFontStyle;
    }
    
    FontVariant FirstLineStyleMetrics::fontVariant() const
    {
        return mFontVariant;
    }
    
    void FirstLineStyleMetrics::setFontVariant(FontVariant aFontVariant)
    {
        mFontVariant = aFontVariant;
    }
    
    FontWeight& FirstLineStyleMetrics::fontWeight()
    {
        return mFontWeight;
    }
    
    void FirstLineStyleMetrics::setFontWeight(FontWeight& aFontWeight)
    {
        mFontWeight = aFontWeight;
    }
    
    LetterSpacing& FirstLineStyleMetrics::letterSpacing()
    {
        return mLetterSpacing;
    }
    
    void FirstLineStyleMetrics::setLetterSpacing(LetterSpacing& aLetterSpacing)
    {
        mLetterSpacing = aLetterSpacing;
    }
    
    LineHeight& FirstLineStyleMetrics::lineHeight()
    {
        return mLineHeight;
    }
    
    void FirstLineStyleMetrics::setLineHeight(LineHeight& aLineHeight)
    {
        mLineHeight = aLineHeight;
    }
    
    TextDecoration FirstLineStyleMetrics::textDecoration() const
    {
        return mTextDecoration;
    }
    
    void FirstLineStyleMetrics::setTextDecoration(TextDecoration aTextDecoration)
    {
        mTextDecoration = aTextDecoration;
    }
    
    TextShadow& FirstLineStyleMetrics::textShadow()
    {
        return mTextShadow;
    }
    
    void FirstLineStyleMetrics::setTextShadow(TextShadow& aTextShadow)
    {
        mTextShadow = aTextShadow;
    }
    
    TextTransform FirstLineStyleMetrics::textTransform() const
    {
        return mTextTransform;
    }
    
    void FirstLineStyleMetrics::setTextTransform(TextTransform aTextTransform)
    {
        mTextTransform = aTextTransform;
    }
    
    VerticalAlign& FirstLineStyleMetrics::verticalAlign()
    {
        return mVerticalAlign;
    }
    
    void FirstLineStyleMetrics::setVerticalAlign(VerticalAlign& aVerticalAlign)
    {
        mVerticalAlign = aVerticalAlign;
    }
    
    WordSpacing& FirstLineStyleMetrics::wordSpacing()
    {
        return mWordSpacing;
    }
    
    void FirstLineStyleMetrics::setWordSpacing(WordSpacing& aWordSpacing)
    {
        mWordSpacing = aWordSpacing;
    }
    
    SelectionStyleMetrics::SelectionStyleMetrics(SelectionStyleMetrics& ref) : StyleMetrics(ref), mBackgroundColor(ref.mBackgroundColor), mCaretColor(ref.mCaretColor), mColor(ref.mColor), mCursor(ref.mCursor), mOutlineColor(ref.mOutlineColor), mOutlineOffset(ref.mOutlineOffset), mOutlineStyle(ref.mOutlineStyle), mOutlineWidth(ref.mOutlineWidth), mTextDecoration(ref.mTextDecoration), mTextShadow(ref.mTextShadow)
    {}
    
    SelectionStyleMetrics::SelectionStyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    SelectionStyleMetrics::SelectionStyleMetrics()
    {
    
    }
    
    ColorValue& SelectionStyleMetrics::backgroundColor()
    {
        return mBackgroundColor;
    }
    
    void SelectionStyleMetrics::setBackgroundColor(ColorValue& aBackgroundColor)
    {
        mBackgroundColor = aBackgroundColor;
    }
    
    ColorValue& SelectionStyleMetrics::caretColor()
    {
        return mCaretColor;
    }
    
    void SelectionStyleMetrics::setCaretColor(ColorValue& aCaretColor)
    {
        mCaretColor = aCaretColor;
    }
    
    ColorValue& SelectionStyleMetrics::color()
    {
        return mColor;
    }
    
    void SelectionStyleMetrics::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    Cursor& SelectionStyleMetrics::cursor()
    {
        return mCursor;
    }
    
    void SelectionStyleMetrics::setCursor(Cursor& aCursor)
    {
        mCursor = aCursor;
    }
    
    ColorValue& SelectionStyleMetrics::outlineColor()
    {
        return mOutlineColor;
    }
    
    void SelectionStyleMetrics::setOutlineColor(ColorValue& aOutlineColor)
    {
        mOutlineColor = aOutlineColor;
    }
    
    NumericValue& SelectionStyleMetrics::outlineOffset()
    {
        return mOutlineOffset;
    }
    
    void SelectionStyleMetrics::setOutlineOffset(NumericValue& aOutlineOffset)
    {
        mOutlineOffset = aOutlineOffset;
    }
    
    OutlineStyle& SelectionStyleMetrics::outlineStyle()
    {
        return mOutlineStyle;
    }
    
    void SelectionStyleMetrics::setOutlineStyle(OutlineStyle& aOutlineStyle)
    {
        mOutlineStyle = aOutlineStyle;
    }
    
    NumericValue& SelectionStyleMetrics::outlineWidth()
    {
        return mOutlineWidth;
    }
    
    void SelectionStyleMetrics::setOutlineWidth(NumericValue& aOutlineWidth)
    {
        mOutlineWidth = aOutlineWidth;
    }
    
    TextDecoration SelectionStyleMetrics::textDecoration() const
    {
        return mTextDecoration;
    }
    
    void SelectionStyleMetrics::setTextDecoration(TextDecoration aTextDecoration)
    {
        mTextDecoration = aTextDecoration;
    }
    
    TextShadow& SelectionStyleMetrics::textShadow()
    {
        return mTextShadow;
    }
    
    void SelectionStyleMetrics::setTextShadow(TextShadow& aTextShadow)
    {
        mTextShadow = aTextShadow;
    }
    
    SVGElementStyleMetrics::SVGElementStyleMetrics(SVGElementStyleMetrics& ref) : StyleMetrics(ref), mColor(ref.mColor), mCursor(ref.mCursor), mDirection(ref.mDirection), mFontFamily(ref.mFontFamily), mFontFeatureSettings(ref.mFontFeatureSettings), mFontKerning(ref.mFontKerning), mFontSize(ref.mFontSize), mFontStretch(ref.mFontStretch), mFontStyle(ref.mFontStyle), mFontVariant(ref.mFontVariant), mFontWeight(ref.mFontWeight), mLetterSpacing(ref.mLetterSpacing), mLineHeight(ref.mLineHeight), mOpacity(ref.mOpacity), mTextDecoration(ref.mTextDecoration), mTextOverflow(ref.mTextOverflow), mTextShadow(ref.mTextShadow), mTextTransform(ref.mTextTransform), mTop(ref.mTop), mTransformOrigin(ref.mTransformOrigin), mTransform(ref.mTransform), mUnicodeBidi(ref.mUnicodeBidi), mVerticalAlign(ref.mVerticalAlign), mVisibility(ref.mVisibility), mWhiteSpace(ref.mWhiteSpace), mWordSpacing(ref.mWordSpacing), mTextAnchor(ref.mTextAnchor), mCx(ref.mCx), mCy(ref.mCy), mHeight(ref.mHeight), mWidth(ref.mWidth), mX(ref.mX), mY(ref.mY), mR(ref.mR), mRx(ref.mRx), mRy(ref.mRy), mD(ref.mD), mFill(ref.mFill), mFillOpacity(ref.mFillOpacity), mFillRule(ref.mFillRule), mRx(ref.mRx), mRy(ref.mRy), mMarkerStart(ref.mMarkerStart), mMarkerMid(ref.mMarkerMid), mMarkerEnd(ref.mMarkerEnd), mStroke(ref.mStroke), mStrokeDasharray(ref.mStrokeDasharray), mStrokeDashoffset(ref.mStrokeDashoffset), mStrokeLinecap(ref.mStrokeLinecap), mStrokeLinejoin(ref.mStrokeLinejoin), mStrokeMitterlimit(ref.mStrokeMitterlimit), mStrokeOpacity(ref.mStrokeOpacity), mStrokeWidth(ref.mStrokeWidth)
    {}
    
    SVGElementStyleMetrics::SVGElementStyleMetrics(CSSStyleDeclaration* decl)
    {
    
    }
    
    SVGElementStyleMetrics::SVGElementStyleMetrics()
    {
    
    }
    
    ColorValue& SVGElementStyleMetrics::color()
    {
        return mColor;
    }
    
    void SVGElementStyleMetrics::setColor(ColorValue& aColor)
    {
        mColor = aColor;
    }
    
    Cursor& SVGElementStyleMetrics::cursor()
    {
        return mCursor;
    }
    
    void SVGElementStyleMetrics::setCursor(Cursor& aCursor)
    {
        mCursor = aCursor;
    }
    
    Direction SVGElementStyleMetrics::direction() const
    {
        return mDirection;
    }
    
    void SVGElementStyleMetrics::setDirection(Direction aDirection)
    {
        mDirection = aDirection;
    }
    
    StringValue& SVGElementStyleMetrics::fontFamily()
    {
        return mFontFamily;
    }
    
    void SVGElementStyleMetrics::setFontFamily(StringValue& aFontFamily)
    {
        mFontFamily = aFontFamily;
    }
    
    FontFeatureSettings& SVGElementStyleMetrics::fontFeatureSettings()
    {
        return mFontFeatureSettings;
    }
    
    void SVGElementStyleMetrics::setFontFeatureSettings(FontFeatureSettings& aFontFeatureSettings)
    {
        mFontFeatureSettings = aFontFeatureSettings;
    }
    
    FontKerning SVGElementStyleMetrics::fontKerning() const
    {
        return mFontKerning;
    }
    
    void SVGElementStyleMetrics::setFontKerning(FontKerning aFontKerning)
    {
        mFontKerning = aFontKerning;
    }
    
    NumericValue& SVGElementStyleMetrics::fontSize()
    {
        return mFontSize;
    }
    
    void SVGElementStyleMetrics::setFontSize(NumericValue& aFontSize)
    {
        mFontSize = aFontSize;
    }
    
    FontStretch SVGElementStyleMetrics::fontStretch() const
    {
        return mFontStretch;
    }
    
    void SVGElementStyleMetrics::setFontStretch(FontStretch aFontStretch)
    {
        mFontStretch = aFontStretch;
    }
    
    FontStyle SVGElementStyleMetrics::fontStyle() const
    {
        return mFontStyle;
    }
    
    void SVGElementStyleMetrics::setFontStyle(FontStyle aFontStyle)
    {
        mFontStyle = aFontStyle;
    }
    
    FontVariant SVGElementStyleMetrics::fontVariant() const
    {
        return mFontVariant;
    }
    
    void SVGElementStyleMetrics::setFontVariant(FontVariant aFontVariant)
    {
        mFontVariant = aFontVariant;
    }
    
    FontWeight& SVGElementStyleMetrics::fontWeight()
    {
        return mFontWeight;
    }
    
    void SVGElementStyleMetrics::setFontWeight(FontWeight& aFontWeight)
    {
        mFontWeight = aFontWeight;
    }
    
    LetterSpacing& SVGElementStyleMetrics::letterSpacing()
    {
        return mLetterSpacing;
    }
    
    void SVGElementStyleMetrics::setLetterSpacing(LetterSpacing& aLetterSpacing)
    {
        mLetterSpacing = aLetterSpacing;
    }
    
    LineHeight& SVGElementStyleMetrics::lineHeight()
    {
        return mLineHeight;
    }
    
    void SVGElementStyleMetrics::setLineHeight(LineHeight& aLineHeight)
    {
        mLineHeight = aLineHeight;
    }
    
    FloatValue& SVGElementStyleMetrics::opacity()
    {
        return mOpacity;
    }
    
    void SVGElementStyleMetrics::setOpacity(FloatValue& aOpacity)
    {
        mOpacity = aOpacity;
    }
    
    TextDecoration SVGElementStyleMetrics::textDecoration() const
    {
        return mTextDecoration;
    }
    
    void SVGElementStyleMetrics::setTextDecoration(TextDecoration aTextDecoration)
    {
        mTextDecoration = aTextDecoration;
    }
    
    TextOverflow SVGElementStyleMetrics::textOverflow() const
    {
        return mTextOverflow;
    }
    
    void SVGElementStyleMetrics::setTextOverflow(TextOverflow aTextOverflow)
    {
        mTextOverflow = aTextOverflow;
    }
    
    TextShadow& SVGElementStyleMetrics::textShadow()
    {
        return mTextShadow;
    }
    
    void SVGElementStyleMetrics::setTextShadow(TextShadow& aTextShadow)
    {
        mTextShadow = aTextShadow;
    }
    
    TextTransform SVGElementStyleMetrics::textTransform() const
    {
        return mTextTransform;
    }
    
    void SVGElementStyleMetrics::setTextTransform(TextTransform aTextTransform)
    {
        mTextTransform = aTextTransform;
    }
    
    NumericValue& SVGElementStyleMetrics::top()
    {
        return mTop;
    }
    
    void SVGElementStyleMetrics::setTop(NumericValue& aTop)
    {
        mTop = aTop;
    }
    
    TransformOrigin& SVGElementStyleMetrics::transformOrigin()
    {
        return mTransformOrigin;
    }
    
    void SVGElementStyleMetrics::setTransformOrigin(TransformOrigin& aTransformOrigin)
    {
        mTransformOrigin = aTransformOrigin;
    }
    
    Transform& SVGElementStyleMetrics::transform()
    {
        return mTransform;
    }
    
    void SVGElementStyleMetrics::setTransform(Transform& aTransform)
    {
        mTransform = aTransform;
    }
    
    UnicodeBidi SVGElementStyleMetrics::unicodeBidi() const
    {
        return mUnicodeBidi;
    }
    
    void SVGElementStyleMetrics::setUnicodeBidi(UnicodeBidi aUnicodeBidi)
    {
        mUnicodeBidi = aUnicodeBidi;
    }
    
    VerticalAlign& SVGElementStyleMetrics::verticalAlign()
    {
        return mVerticalAlign;
    }
    
    void SVGElementStyleMetrics::setVerticalAlign(VerticalAlign& aVerticalAlign)
    {
        mVerticalAlign = aVerticalAlign;
    }
    
    Visibility SVGElementStyleMetrics::visibility() const
    {
        return mVisibility;
    }
    
    void SVGElementStyleMetrics::setVisibility(Visibility aVisibility)
    {
        mVisibility = aVisibility;
    }
    
    WhiteSpace SVGElementStyleMetrics::whiteSpace() const
    {
        return mWhiteSpace;
    }
    
    void SVGElementStyleMetrics::setWhiteSpace(WhiteSpace aWhiteSpace)
    {
        mWhiteSpace = aWhiteSpace;
    }
    
    WordSpacing& SVGElementStyleMetrics::wordSpacing()
    {
        return mWordSpacing;
    }
    
    void SVGElementStyleMetrics::setWordSpacing(WordSpacing& aWordSpacing)
    {
        mWordSpacing = aWordSpacing;
    }
    
    TextAnchor SVGElementStyleMetrics::textAnchor() const
    {
        return mTextAnchor;
    }
    
    void SVGElementStyleMetrics::setTextAnchor(TextAnchor aTextAnchor)
    {
        mTextAnchor = aTextAnchor;
    }
    
    NumericValue& SVGElementStyleMetrics::cx()
    {
        return mCx;
    }
    
    void SVGElementStyleMetrics::setCx(NumericValue& aCx)
    {
        mCx = aCx;
    }
    
    NumericValue& SVGElementStyleMetrics::cy()
    {
        return mCy;
    }
    
    void SVGElementStyleMetrics::setCy(NumericValue& aCy)
    {
        mCy = aCy;
    }
    
    NumericValue& SVGElementStyleMetrics::height()
    {
        return mHeight;
    }
    
    void SVGElementStyleMetrics::setHeight(NumericValue& aHeight)
    {
        mHeight = aHeight;
    }
    
    NumericValue& SVGElementStyleMetrics::width()
    {
        return mWidth;
    }
    
    void SVGElementStyleMetrics::setWidth(NumericValue& aWidth)
    {
        mWidth = aWidth;
    }
    
    NumericValue& SVGElementStyleMetrics::x()
    {
        return mX;
    }
    
    void SVGElementStyleMetrics::setX(NumericValue& aX)
    {
        mX = aX;
    }
    
    NumericValue& SVGElementStyleMetrics::y()
    {
        return mY;
    }
    
    void SVGElementStyleMetrics::setY(NumericValue& aY)
    {
        mY = aY;
    }
    
    NumericValue& SVGElementStyleMetrics::r()
    {
        return mR;
    }
    
    void SVGElementStyleMetrics::setR(NumericValue& aR)
    {
        mR = aR;
    }
    
    RadiusAxis& SVGElementStyleMetrics::rx()
    {
        return mRx;
    }
    
    void SVGElementStyleMetrics::setRx(RadiusAxis& aRx)
    {
        mRx = aRx;
    }
    
    RadiusAxis& SVGElementStyleMetrics::ry()
    {
        return mRy;
    }
    
    void SVGElementStyleMetrics::setRy(RadiusAxis& aRy)
    {
        mRy = aRy;
    }
    
    PathData& SVGElementStyleMetrics::d()
    {
        return mD;
    }
    
    void SVGElementStyleMetrics::setD(PathData& aD)
    {
        mD = aD;
    }
    
    ColorValue& SVGElementStyleMetrics::fill()
    {
        return mFill;
    }
    
    void SVGElementStyleMetrics::setFill(ColorValue& aFill)
    {
        mFill = aFill;
    }
    
    FloatValue& SVGElementStyleMetrics::fillOpacity()
    {
        return mFillOpacity;
    }
    
    void SVGElementStyleMetrics::setFillOpacity(FloatValue& aFillOpacity)
    {
        mFillOpacity = aFillOpacity;
    }
    
    FillRule SVGElementStyleMetrics::fillRule() const
    {
        return mFillRule;
    }
    
    void SVGElementStyleMetrics::setFillRule(FillRule aFillRule)
    {
        mFillRule = aFillRule;
    }
    
    RadiusAxis& SVGElementStyleMetrics::rx()
    {
        return mRx;
    }
    
    void SVGElementStyleMetrics::setRx(RadiusAxis& aRx)
    {
        mRx = aRx;
    }
    
    RadiusAxis& SVGElementStyleMetrics::ry()
    {
        return mRy;
    }
    
    void SVGElementStyleMetrics::setRy(RadiusAxis& aRy)
    {
        mRy = aRy;
    }
    
    Marker& SVGElementStyleMetrics::markerStart()
    {
        return mMarkerStart;
    }
    
    void SVGElementStyleMetrics::setMarkerStart(Marker& aMarkerStart)
    {
        mMarkerStart = aMarkerStart;
    }
    
    Marker& SVGElementStyleMetrics::markerMid()
    {
        return mMarkerMid;
    }
    
    void SVGElementStyleMetrics::setMarkerMid(Marker& aMarkerMid)
    {
        mMarkerMid = aMarkerMid;
    }
    
    Marker& SVGElementStyleMetrics::markerEnd()
    {
        return mMarkerEnd;
    }
    
    void SVGElementStyleMetrics::setMarkerEnd(Marker& aMarkerEnd)
    {
        mMarkerEnd = aMarkerEnd;
    }
    
    ColorValue& SVGElementStyleMetrics::stroke()
    {
        return mStroke;
    }
    
    void SVGElementStyleMetrics::setStroke(ColorValue& aStroke)
    {
        mStroke = aStroke;
    }
    
    Dasharray& SVGElementStyleMetrics::strokeDasharray()
    {
        return mStrokeDasharray;
    }
    
    void SVGElementStyleMetrics::setStrokeDasharray(Dasharray& aStrokeDasharray)
    {
        mStrokeDasharray = aStrokeDasharray;
    }
    
    NumericValue& SVGElementStyleMetrics::strokeDashoffset()
    {
        return mStrokeDashoffset;
    }
    
    void SVGElementStyleMetrics::setStrokeDashoffset(NumericValue& aStrokeDashoffset)
    {
        mStrokeDashoffset = aStrokeDashoffset;
    }
    
    ColorValue& SVGElementStyleMetrics::strokeLinecap()
    {
        return mStrokeLinecap;
    }
    
    void SVGElementStyleMetrics::setStrokeLinecap(ColorValue& aStrokeLinecap)
    {
        mStrokeLinecap = aStrokeLinecap;
    }
    
    ColorValue& SVGElementStyleMetrics::strokeLinejoin()
    {
        return mStrokeLinejoin;
    }
    
    void SVGElementStyleMetrics::setStrokeLinejoin(ColorValue& aStrokeLinejoin)
    {
        mStrokeLinejoin = aStrokeLinejoin;
    }
    
    IntegerValue& SVGElementStyleMetrics::strokeMitterlimit()
    {
        return mStrokeMitterlimit;
    }
    
    void SVGElementStyleMetrics::setStrokeMitterlimit(IntegerValue& aStrokeMitterlimit)
    {
        mStrokeMitterlimit = aStrokeMitterlimit;
    }
    
    FloatValue& SVGElementStyleMetrics::strokeOpacity()
    {
        return mStrokeOpacity;
    }
    
    void SVGElementStyleMetrics::setStrokeOpacity(FloatValue& aStrokeOpacity)
    {
        mStrokeOpacity = aStrokeOpacity;
    }
    
    IntegerValue& SVGElementStyleMetrics::strokeWidth()
    {
        return mStrokeWidth;
    }
    
    void SVGElementStyleMetrics::setStrokeWidth(IntegerValue& aStrokeWidth)
    {
        mStrokeWidth = aStrokeWidth;
    }
    
    
} // namespace Newtoo